{"slots": {"0": {"name": "slot1", "type": {"events": [], "methods": []}}, "1": {"name": "slot2", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "local total = 0\nlocal content = hubs[1].getContent()\nlocal screenHubContent = \" local list = {}\"\n\nfor i = 1, #content do  \n    \n    local weight = (content[i].quantity * system.getItem(content[i].id).unitMass)\n    if weight > 1000 then weight = math.floor(weight/1000) .. \" t\" else weight = math.floor(weight/1000) .. \" kg\" end\n    \n    local quantity = content[i].quantity\n    if quantity > 1000 then quantity = math.floor(quantity/1000) .. \" kl\" else quantity = math.floor(quantity) .. \" l\" end\n    \n    screenHubContent = screenHubContent .. [[\n    list[#list+1] = {\n        quantity = \"]]..quantity..[[\",\n        name = \"]]..system.getItem(content[i].id).displayName..[[\",\n        icon = \"]]..system.getItem(content[i].id).iconPath..[[\", \n        weight = \"]]..weight..[[\"\n    }]] \n\n    if isOre(system.getItem(content[i].id).displayName) and ShowOreValue then\n        total = total + price(system.getItem(content[i].id).displayName)*math.floor(content[i].quantity)        \n    end\n\nend\n\n--if ShowOreValue == true then\n    screenHubContent = screenHubContent .. \"local OreValue = '\"..reformatInt(total)..\"'\"\n--end\n\nfor i = 1, #screens do \n    screens[i].setRenderScript(screenVar .. screenHubContent .. screenContent) \nend\n", "filter": {"args": [], "signature": "onContentUpdate()", "slotKey": "0"}, "key": "0"}, {"code": "local Title = \"Title goes here\" --export\nlocal Color = \"50,100,250\" --export: Main color RGB value\nlocal FontColor = \"255,255,250\" --export: Font color RGB value\nlocal ContainerMaxVolume = 97500 --export\nlocal ListView = false --export: 16 items per page when true, else 8\nlocal HideUnit = true --export\n-----------------------------------------------------------------------------------------------------\n\nShowOreValue = false --export: Calculates value of ores in container, based on prices below\nBauxite = 25 --export: Bauxite market value\nCoal = 25 --export: Coal market value\nQuartz = 25 --export: Quartz market value\nHematite = 25 --export: Hematite market value\nNatron = 78 --export: Natron market value\nChromite = 130 --export: Chromite market value\nLimestone = 145 --export: Limestone market value\nMalachite = 25 --export: Malachite market value\nGarnierite = 140 --export: Garnierite market value\nAcanthite = 128 --export: Acanthite market value\nPetalite = 900 --export: Petalite market value\nPyrite = 900 --export: Pyrite market value\nCryolite = 1880 --export: Cryolite market value\nCobaltite = 2000 --export: Cobaltite market value\nKolbeckite = 2640 --export: Kolbeckite market value\nGold_Nuggets = 1800 --export: Gold_Nuggets market value\nColumbite = 450 --export: Columbite market value\nVanadinite = 950 --export: Vanadinite market value\nIllmenite = 1500 --export: Illmenite market value\nRhodonite = 420 --export: Rhodonite market value\nThoramine = 0 --export: Thoramine market value\n\n-----------------------------------------------------------------------------------------------------\nlocal version = 0.11\n\nsigns = {}\nscreens = {}\nhubs = {}\n\nlocal json = require(\"dkjson\")\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getClass then\n            if element.getClass()==\"ScreenUnit\" then \n                screens[#screens+1]=element\n                element.activate()\n            elseif element.getClass()==\"ScreenSignUnit\"then\n                signs[#signs+1]=element\n\n            elseif element.getClass()==\"ItemContainer\"then\n                hubs[#hubs+1]=element\n                \n            else\n                --system.print(element.getClass())\n            end \n        end \n    end \nend\n\nunit.setTimer(\"upd\",1)\n\n\nscreenVar = [[\nlocal Title =  \"]].. Title .. [[\"\nlocal color1 = {r=]].. Split(FontColor, \",\")[1] .. [[/255,g=]].. Split(FontColor, \",\")[2] .. [[/255,b=]].. Split(FontColor, \",\")[3] .. [[/255 }\nlocal color2 = {r=]].. Split(Color, \",\")[1] .. [[/255,g=]].. Split(Color, \",\")[2] .. [[/255,b=]].. Split(Color, \",\")[3] .. [[/255 }\nlocal ContainerMaxVolume = \"]].. ContainerMaxVolume .. [[\"\nlocal ListView = ]].. tostring(ListView) .. [[\nlocal Version = ]].. version .. [[\n\n]]\n\nif ListView then \n    screenVar = screenVar .. \" local IconsPerPage = 16 local IconSize = 32 \"\nelse \n    screenVar = screenVar .. \" local IconsPerPage = 8 local IconSize = 64 \" \nend \n\nif HideUnit then unit.hideWidget() end\n\nsystem.print(\"------------------------------------------------------------\")\nsystem.print(\"-------------- ContainerMonitor v\"..version..\" --------------\")\nsystem.print(\"------------------------------------------------------------\")\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-1"}, "key": "1"}, {"code": "local ItemsMass = hubs[1].getItemsMass()\n\n\n\nif ItemsMass then\n    local json = require(\"dkjson\")\n    local input = {\n        [\"NextUpdate\"] = hubs[1].updateContent(),\n        [\"TotalWeight\"] = reformatInt(math.floor(ItemsMass/1000)),\n        [\"ContainerVolume\"] = hubs[1].getItemsVolume()\n    }\n    screens[1].setScriptInput(json.encode(input))    \nelse\n    unit.exit()\nend", "filter": {"args": [{"value": "upd"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "2"}, {"code": "\nfunction reformatInt(i)\n  return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction isOre(name)\n     if name == \"Bauxite\" or\n        name == \"Coal\" or\n        name == \"Quartz\" or\n        name == \"Hematite\" or\n        name == \"Natron\" or\n        name == \"Chromite\" or\n        name == \"Limestone\" or\n        name == \"Malachite\" or\n        name == \"Garnierite\" or\n        name == \"Acanthite\" or\n        name == \"Petalite\" or\n        name == \"Pyrite\" or\n        name == \"Cryolite\" or\n        name == \"Cobaltite\" or\n        name == \"Kolbeckite\" or\n        name == \"Gold nuggets\" or\n        name == \"Columbite\" or\n        name == \"Vanadinite\" or\n        name == \"Illmenite\" or\n        name == \"Rhodonite\" or\n        name == \"Thoramine\" then\n        return true\n     else return false\n     end\nend\n\nfunction price(ore)\n     if ore == \"Bauxite\" then return Bauxite elseif\n        ore == \"Coal\" then return Coal elseif\n        ore == \"Quartz\" then return Quartz elseif\n        ore == \"Hematite\" then return Hematite elseif\n        ore == \"Natron\" then return Natron elseif\n        ore == \"Chromite\" then return Chromite elseif\n        ore == \"Limestone\" then return Limestone elseif\n        ore == \"Malachite\" then return Malachite elseif\n        ore == \"Garnierite\" then return Garnierite elseif\n        ore == \"Acanthite\" then return Acanthite elseif\n        ore == \"Petalite\" then return Petalite elseif\n        ore == \"Pyrite\" then return Pyrite elseif\n        ore == \"Cryolite\" then return Cryolite elseif\n        ore == \"Cobaltite\" then return Cobaltite elseif\n        ore == \"Kolbeckite\" then return Kolbeckite elseif\n        ore == \"Gold nuggets\" then return Gold_Nuggets elseif\n        ore == \"Columbite\" then return Columbite elseif\n        ore == \"Vanadinite\" then return Vanadinite elseif\n        ore == \"Illmenite\" then return Illmenite elseif\n        ore == \"Rhodonite\" then return Rhodonite elseif\n        ore == \"Thoramine\" then return Thoramine \n     end\nend\n\nfunction Split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "3"}, {"code": "screenContent = [[\n\n--------screenContent--------\n\nlocal Layer = createLayer()\nlocal ImagesLayer = createLayer()\nlocal rx, ry = getResolution()\nlocal json = require(\"dkjson\")\nlocal input = json.decode(getInput())\nIndex = Index or 1 \n\nlocal TotalWeight = input.TotalWeight\nlocal containerVolume = input.ContainerVolume\n\n\n\n\nlocal BiggestFont = loadFont(\"Play-Bold\", 50)\n\nlocal NormalFont = loadFont('Play', 24)\nlocal SmallFont = loadFont('RobotoCondensed', 18)\nlocal MediumFont = loadFont('RobotoCondensed', 22)\nlocal SmallestFont = loadFont('RobotoCondensed', 14)\n\nlocal cx,cy=getCursor()\n\nfunction DrawFrame(X,Y,Width,Height)\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(Layer, X, Y, X+Width,Y)-- top line\n    addLine(Layer, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(Layer,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(Layer,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(Layer,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(Layer,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(Layer,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(Layer,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(Layer,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(Layer,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(Layer,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(Layer,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(Layer,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(Layer,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(Layer,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(Layer,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(Layer, align, AlignV_Middle)\n    setNextFillColor(Layer, color1.r, color1.g, color1.b, 1)  \n    addText(Layer, font, text, x,y) \nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(Layer, 1) \n    setNextStrokeColor(Layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(Layer, color1.r, color1.g, color1.b, 0.1)\n    addBoxRounded(Layer,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Right,color1,Font, text1, X-Width/2-20,Y+Height/2)\n    AddText(AlignH_Left,color1, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(Layer, color2.r, color2.g, color2.b, 1)\n    addBoxRounded(Layer,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawArrow(Arrow,X,Y)\n    local oX = rx*0.004\n    for i=1,3 do\n        if Arrow == \"left\" then\n            addLine(Layer,X,Y,X-oX*2,Y+oX*2)  \n            addLine(Layer,X-oX*2,Y+oX*2,X,Y+oX*4)  \n            X = X - rx*0.01\n        else\n            addLine(Layer,X,Y,X+oX*2,Y+oX*2)  \n            addLine(Layer,X+oX*2,Y+oX*2,X,Y+oX*4)  \n            X = X + rx*0.01\n        end\n    end\nend\n\n\nlocal NumberOfPages = math.ceil(#list / IconsPerPage)\n\n\nlocal x = rx*0.5\nlocal y = ry*0.01\nlocal l = 50\n \nif cy > 0 and cy < ry then\n    if cx > x and cx < x*1.5 and getCursorReleased() then\n        Index = Index -1\n        DrawArrow(\"left\",rx*0.68,ry*0.01)\n    end\n\n    if cx > rx*0.75 and cx < rx and getCursorReleased() then\n        Index = Index +1\n        DrawArrow(\"right\",rx*0.79,ry*0.01)\n    end\nend\n\n\nif Index < 1 then Index = 1 end\nif Index > NumberOfPages then Index = NumberOfPages end\n\n\n    \n    \n\nlocal max = Index*IconsPerPage\nif max > #list then max = #list end\n\nlocal x = rx*0.555\nlocal y = ry*0.07\n\n\n\n\n    for i = 1+(IconsPerPage*Index)-IconsPerPage, max do -- draw content\n        \n        image = loadImage(list[i].icon)\n        if ListView then\n            AddText(AlignH_Left,fontColor,SmallFont,list[i].name, x, y+IconSize*0.5)\n            AddText(AlignH_Right,fontColor,SmallFont, list[i].quantity .. \" (\" .. list[i].weight .. \")\", rx*0.95, y+IconSize*0.5)\n            addImage(ImagesLayer, image, x-50,y, IconSize, IconSize)\n        else\n            AddText(AlignH_Left,fontColor,MediumFont,list[i].name, x-40+IconSize+15, y+IconSize*0.5)\n            addImage(ImagesLayer, image, x-42,y, IconSize, IconSize)\n            AddText(AlignH_Right,fontColor,MediumFont, list[i].quantity .. \" / \" .. list[i].weight, rx*0.95, y+IconSize*0.5)\n        end\n        y = y + IconSize\n\n    end\n\n\nsetDefaultStrokeColor(Layer,Shape_Line,color2.r, color2.g, color2.b, 1)\nDrawFrame(rx/4,ry*0.2,140,120) -- hub frame\nAddText(AlignH_Center,fontColor,BiggestFont, Title, rx*0.25,ry*0.1)\n\nAddText(AlignH_Center,fontColor,NormalFont, \"Weight: \" .. TotalWeight .. \" tons\", rx*0.25,ry*0.58)\nAddText(AlignH_Center,fontColor,NormalFont, \"Volume: \" .. math.floor(containerVolume/1000)..\" kl\", rx*0.25,ry*0.66)\n\nif OreValue ~= '0' then\n    AddText(AlignH_Center,fontColor,NormalFont, \"Ore Value: \"..OreValue..\" ħ\", rx*0.25,ry*0.74)\nend\n\nsetDefaultStrokeWidth(Layer,Shape_Line,6)\nDrawFrame(rx*0.73,ry*0.05,rx*0.27,ry*0.90) -- content frame\nAddText(AlignH_Center,fontColor,NormalFont,\"Content: \" .. #list .. \" items\", rx*0.25,ry*0.5)\nAddText(AlignH_Center,fontColor,SmallestFont, \"Page \"..Index..\"/\"..NumberOfPages, rx*0.735,ry*0.02)\nDrawProgressBar(rx*0.22,ry*0.85,320,40,ContainerMaxVolume,containerVolume,\"\",math.floor(containerVolume*100/ContainerMaxVolume)..\"%\",NormalFont)\n\n\nif getDeltaTime() > 3 then \n    AddText(AlignH_Center,fontColor,SmallestFont, \"Board not started\", rx*0.735,ry*0.978)\nelse\n    AddText(AlignH_Center,fontColor,SmallestFont, \"Next update in \"..math.floor(input.NextUpdate).. \" seconds\", rx*0.735,ry*0.978)\nend\n\nrequestAnimationFrame(100)\n]]\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "4"}], "methods": [], "events": []}
