{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--system.print(\"Storage Acquired\")\nlocal itemsList = json.decode(hub.getItemsList())\ntotal = 0\noreList = {}\nfor entry,itemData in pairs(itemsList) do\n    if isOre(itemData.name) then\n        total = total + price(itemData.name)*math.floor(itemData.quantity) \n        if itemData.quantity > 1000 then\n            quantity = reformatInt(math.floor(itemData.quantity/1000)) .. \"k\"\n        else\n            quantity = reformatInt(math.floor(itemData.quantity))\n        end\n        oreList[#oreList+1] = quantity .. \" \" ..  itemData.name\n    end\nend\n\nscreenContent = screenContent .. [[\nAddText(AlignH_Center,fontColor,BiggestFont, \"Value: ]]..reformatInt(total)..[[Ä§\", rx*0.73,ry*0.8)\n]]\n\n\nfor i = 1, #oreList do \n    screenContent = screenContent .. [[\n    AddText(AlignH_Center,fontColor,BiggestFont, \"]]..oreList[i]..[[\", rx*0.73,]].. 40+i*55 ..[[)\n    ]]\nend\n\n\nscreen.setRenderScript(screenContent)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"0"},"key":"0"},{"code":"local title = \"Mining Units #1\"\nlocal containerMaxVolume = 1920000\n\nBauxite = 27 --export: Bauxite market value\nCoal = 27 --export: Coal market value\nQuartz = 27 --export: Quartz market value\nHematite = 27 --export: Hematite market value\nNatron = 78 --export: Natron market value\nChromite = 130 --export: Chromite market value\nLimestone = 145 --export: Limestone market value\nMalachite = 25 --export: Malachite market value\nGarnierite = 140 --export: Garnierite market value\nAcanthite = 128 --export: Acanthite market value\nPetalite = 900 --export: Petalite market value\nPyrite = 900 --export: Pyrite market value\nCryolite = 1880 --export: Cryolite market value\nCobaltite = 2000 --export: Cobaltite market value\nKolbeckite = 2640 --export: Kolbeckite market value\nGold_Nuggets = 1800 --export: Gold_Nuggets market value\nColumbite = 450 --export: Columbite market value\nVanadinite = 950 --export: Vanadinite market value\nIllmenite = 1500 --export: Illmenite market value\nRhodonite = 420 --export: Rhodonite market value\nThoramine = 0 --export: Thoramine market value\n\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\" then\n        if element.getElementClass then\n            if element.getElementClass()==\"ScreenUnit\" then \n                screen=element\n                element.activate()\n            elseif element.getElementClass()==\"ItemContainer\" and slot == \"slot1\" then\n                hub=element\n            end \n        end \n    end \nend\n\nif hub == nil then\n    system.print(\"Hub not found or not linked to slot1\")\n    unit.exit()\nend\n\nlocal containerVolume = hub.getItemsVolume()\nlocal containerMass = reformatInt(math.floor(hub.getItemsMass()/1000))\n\nscreenContent = screenContent .. [[\nAddText(AlignH_Center,fontColor,BiggestFont, \"]]..title..[[\", rx*0.25,ry*0.1)\nDrawProgressBar(rx/4,ry*0.85,320,40,]]..containerMaxVolume..[[,]]..containerVolume..[[,\"\",math.floor(]]..containerVolume..[[*100/]]..containerMaxVolume..[[)..\"%\",BiggerFont)\nAddText(AlignH_Center,fontColor,BiggestFont, \"]]..containerMass..[[ tons\", rx*0.25,ry*0.64)\nAddText(AlignH_Center,fontColor,BiggestFont, \"]]..math.floor(containerVolume/1000)..[[ kl\", rx*0.25,ry*0.74)\n]]\n\nscreen.setRenderScript(screenContent)\nhub.acquireStorage()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"screenContent = [[\n\nlocal D=createLayer()\nlocal H=createLayer()\nlocal rx,ry=getResolution() \nlocal BiggestFont = loadFont(\"Play-Bold\", 50)\nlocal BiggerFont = loadFont(\"Play-Bold\", 24) \nlocal NormalFont = loadFont(\"RobotoCondensed\", 20) \nlocal SmallerFont = loadFont(\"Play-Bold\", 18) \nlocal SmallestFont = loadFont(\"RobotoCondensed\", 15)\ncolor1 = {r=1,g=0.76,b=0.06}\ncolor2 = {r=0,g=121/255,b=191/255}\nsetDefaultStrokeWidth(D,Shape_Line,8)\nsetDefaultStrokeColor(D,Shape_Line,color2.r, color2.g, color2.b, 1)\n\nfunction DrawFrame(X,Y,Width,Height)\n    --  ___                 ___\n    -- /   \\_______________/   \\\n    -- |                       |\n    -- |                       |\n    -- |                       |\n    -- |    _______________    |\n    -- \\___/               \\___/  this is not a bone!\n    --\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(D, X, Y, X+Width,Y)-- top line\n    addLine(D, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(D,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(D,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(D,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(D,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(D,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(D,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(D,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(D,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(D,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(D,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(D,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(D,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(D,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(D,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(H, align, AlignV_Middle)\n    setNextFillColor(H, color1.r, color1.g, color1.b, 1)  \n    addText(H, font, text, x,y) \nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0, 0, 0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Right,color1,Font, text1, X-Width/2-20,Y+Height/2)\n    AddText(AlignH_Left,color1, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nDrawFrame(rx/4,140,430/2,175)\nsetDefaultStrokeWidth(D,Shape_Line,4)\nDrawFrame(rx*0.73,50,250,ry-100) \n\n]]\n\n\nfunction reformatInt(i)\n  return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction isOre(name)\n     if name == \"Bauxite\" or\n        name == \"Coal\" or\n        name == \"Quartz\" or\n        name == \"Hematite\" or\n        name == \"Natron\" or\n        name == \"Chromite\" or\n        name == \"Limestone\" or\n        name == \"Malachite\" or\n        name == \"Garnierite\" or\n        name == \"Acanthite\" or\n        name == \"Petalite\" or\n        name == \"Pyrite\" or\n        name == \"Cryolite\" or\n        name == \"Cobaltite\" or\n        name == \"Kolbeckite\" or\n        name == \"Gold nuggets\" or\n        name == \"Columbite\" or\n        name == \"Vanadinite\" or\n        name == \"Illmenite\" or\n        name == \"Rhodonite\" or\n        name == \"Thoramine\" then\n        return true\n     else return false\n     end\nend\n\nfunction price(ore)\n     if ore == \"Bauxite\" then return Bauxite elseif\n        ore == \"Coal\" then return Coal elseif\n        ore == \"Quartz\" then return Quartz elseif\n        ore == \"Hematite\" then return Hematite elseif\n        ore == \"Natron\" then return Natron elseif\n        ore == \"Chromite\" then return Chromite elseif\n        ore == \"Limestone\" then return Limestone elseif\n        ore == \"Malachite\" then return Malachite elseif\n        ore == \"Garnierite\" then return Garnierite elseif\n        ore == \"Acanthite\" then return Acanthite elseif\n        ore == \"Petalite\" then return Petalite elseif\n        ore == \"Pyrite\" then return Pyrite elseif\n        ore == \"Cryolite\" then return Cryolite elseif\n        ore == \"Cobaltite\" then return Cobaltite elseif\n        ore == \"Kolbeckite\" then return Kolbeckite elseif\n        ore == \"Gold nuggets\" then return Gold_Nuggets elseif\n        ore == \"Columbite\" then return Columbite elseif\n        ore == \"Vanadinite\" then return Vanadinite elseif\n        ore == \"Illmenite\" then return Illmenite elseif\n        ore == \"Rhodonite\" then return Rhodonite elseif\n        ore == \"Thoramine\" then return Thoramine \n     end\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"2"}],"methods":[],"events":[]}
