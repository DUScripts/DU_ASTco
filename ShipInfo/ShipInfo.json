{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"------------------------------------------------------------------------------\n------ Ship Info by Krengus --------------------------------------------------\n------ support and feedback: https://discord.gg/BfnbtFyHrt\n------------------------------------------------------------------------------\nversion = 0.5\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- USER VARIABLES --\n\nHub1_Max_Volume = 13500 --export\nHub2_Max_Volume = 487500 --export\nHub3_Max_Volume = 12000 --export\nHub4_Max_Volume = 12000 --export\n\nContainer_Optimization = 5 --export\nFuel_Tank_Optimization = 5 --export\nSpace_Fuel_Tank_Handling = 5 --export\nAtmo_Fuel_Tank_Handling = 5 --export\nRocket_Fuel_Tank_Handling = 5 --export\n\nSelectionOpacity = 0.9 --export: background opactity of selection on mouse hover\n--Theme = 3 --export: select theme number (0=default, 1=custom ,2+=presets)\nCustom_Color1 = {r=0.06,g=0.76,b=1}\nCustom_Color2 = {r=1,g=204/255,b=153/255}\nCustom_Font_Color = {r=1,g=1,b=1}\nCustom_Background = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\n\nRefresh_Rate = 1 --export\nShow_Unit = true --export\nDebug = false --export\n\n\n\n\n\n\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- SCRIPT START --\n\n--if Theme == 1 then\n----    color1 = Custom_Color1\n----   color2 = Custom_Color2\n----   fontColor = Custom_Font_Color\n----   background = Custom_Background\n----elseif Theme == 2 then\n----    color1 = {r=1,g=200/255,b=27/255} \n----  color2 = {r=1,g=1,b=1}\n----    fontColor = {r=1,g=1,b=1}\n----  background = \"assets.prod.novaquark.com/61625/bcacc064-8bd6-42d5-a9fd-8c91be03f114.jpg\"\n----elseif Theme == 3 then\n----    color1 = {r=18/255,g=134/255,b=168/255}\n----   color2 = {r=50/255,g=116/255,b=52/255} \n----   fontColor = {r=1,g=1,b=1}\n----    background = \"assets.prod.novaquark.com/61625/d3fb78ed-90bd-4b2e-945a-7bbed92932e2.png\"\n--elseif Theme == 4 then\n-- color1 = {r=1,g=1,b=1}\n--  color2 = {r=0.06,g=0.76,b=1} \n--   fontColor = {r=0,g=0,b=0}\n--   background = \"assets.prod.novaquark.com/61625/cc4a68e2-39c5-463e-9593-c174a4d41175.jpg\"\n--elseif Theme == 5 then\n-- color1 = {r=132/255,g=0,b=0} \n-- color2 = {r=226/255,g=25/255,b=25/255}\n--  fontColor = {r=1,g=1,b=1}\n--  background = \"assets.prod.novaquark.com/61625/ae249dff-af47-410a-b9f7-9d8db6f5aaed.jpg\"\n--elseif Theme == 6 then\n--  color1 = {r=1,g=1,b=1} \n--  color2 = {r=1,g=1,b=1}\n--   fontColor = {r=1,g=1,b=1}\n--   background = \"\"\n--else\n--  color1 = {r=0.06,g=0.76,b=1} \n--  color2 = {r=1,g=204/255,b=153/255} \n--   fontColor = {r=1,g=1,b=1}\n--   background = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\n--end\n\n\nMaxHandlingHP = 1.2 -- multiplier for maxed HP handling talents\n-- base hitpoints, used to find out tank size and weight        \nlocal AtmoTankXS = 49\nlocal AtmoTankS = 162\nlocal AtmoTankM = 1314\nlocal AtmoTankL = 10460\nlocal SpaceTankXS = 49\nlocal SpaceTankS = 186\nlocal SpaceTankM = 1495\nlocal SpaceTankL = 15932\nlocal RocketTankXS = 365\nlocal RocketTankS = 735\nlocal RocketTankM = 6230\nlocal RocketTankL = 68823\n\n\n\nFirstRun = true\nOldContent = {}\n\nlocal HubMaxVol = {Hub1_Max_Volume,Hub2_Max_Volume,Hub3_Max_Volume,Hub4_Max_Volume}\nscreens =  {}\nlocal hubs = {}\nlocal Hubs = {}\nlocal tanks = {}\n--TotalMaxHitPoints = 0\n--TotalHitPoints = 0\n--BrokenCount = 0\n--DamagedCount = 0\nlocal json = require(\"dkjson\")\n\nfor slot,element in pairs(unit)do \n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getElementClass then\n            if element.getElementClass()==\"ScreenUnit\"then \n                screens[#screens+1]=element\n                screens[#screens].slot=slot\n                screens[#screens].id=element.getId()\n            elseif element.getElementClass()==\"CoreUnitDynamic\"then \n                core=element\n            elseif element.getElementClass()==\"ItemContainer\"then\n                hubs[#hubs+1]=element\n                hubs[#hubs].slot=slot\n            elseif element.getElementClass()==\"DataBankUnit\"then \n                databank=element\n            else\n                --system.print(element.getElementClass())\n            end \n        end \n    end \nend\n\nif not next(screens) then\n    system.print(\"No screen found\")\n    unit.exit()\nend\ntable.sort(screens, function(a,b) return a.slot < b.slot end) -- sorting screens table by slot\n\nif core == nil then\n    system.print(\"No core found\")\n    unit.exit()\nend\n\nif databank == nil then\n    system.print(\"No databank found\")\n    unit.exit()\nend\n--databank.clear()\nif databank.hasKey(\"theme\") == 0 then\n    if Debug == true then system.print(\"Databank theme key not found\") end\n    databank.setIntValue(\"theme\",1)\nend\n\nif not next(hubs) then\n    system.print(\"No hub found\")\n    unit.exit()\nend\ntable.sort(hubs, function(a,b) return a.slot < b.slot end) -- sorting hubs table by slot\n\n\n\nunit.setTimer(\"upd\",Refresh_Rate)\nif Show_Unit == false then unit.hide() end\n\n\n\nfor i=1, #hubs do\n    Hubs[i] = {\n        l = core.getElementNameById(hubs[i].getId()),\n        m = HubMaxVol[i],\n        v = math.floor(hubs[i].getItemsVolume()),\n        w = math.floor(hubs[i].getItemsMass()/1000)\n    }\nend\n\n\n\n\n\nfunction FormatTable(arr)\n    table.sort(arr, function(a,b) return a.w > b.w end) -- sorting table, heaviest first\n    local a = {}\n    for i = 1, 3 do \n        if i < #arr+1 then -- limiting table to 3 lines\n            table.insert(a,{l = arr[i].l,w = math.floor(arr[i].w)})\n        end\n    end\n    return a\nend\n\n\n\n\nlocal elements = core.getElementIdList()\n\nfor i = 1, #elements do -- building tanks and HP initial table\n\n  --  local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n    local ElementType = core.getElementTypeById(elements[i]) \n   -- local HitPoints = core.getElementHitPointsById(elements[i])\n\n  --  if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n      --  if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n      --  if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n   -- end\n\n    --TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n    --TotalHitPoints = TotalHitPoints + HitPoints\n\n    if string.match(ElementType, \"Fuel Tank\") then\n        local ElementName = core.getElementNameById(elements[i])\n        local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n        -- 4 -- natron\n        -- 6 -- xergon\n        -- 0.8 -- rocket\n\n        if string.match(ElementType, \"Atmospheric Fuel Tank\") then\n            if MaxHitPoints > AtmoTankXS and MaxHitPoints < AtmoTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > AtmoTankS and MaxHitPoints < AtmoTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > AtmoTankM and MaxHitPoints < AtmoTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > AtmoTankL and MaxHitPoints < AtmoTankL*MaxHandlingHP then\n                TankWeight = 5481.27            \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Atmo_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Space Fuel Tank\") then\n            if MaxHitPoints > SpaceTankXS and MaxHitPoints < SpaceTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > SpaceTankS and MaxHitPoints < SpaceTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > SpaceTankM and MaxHitPoints < SpaceTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > SpaceTankL and MaxHitPoints < SpaceTankL*MaxHandlingHP then\n                TankWeight = 5481.27  \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Space_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Rocket Fuel Tank\") then\n            if MaxHitPoints > RocketTankXS and MaxHitPoints < RocketTankXS*MaxHandlingHP then\n                TankWeight = 173.42\n                TankMaxVolume = 400\n            elseif MaxHitPoints > RocketTankS and MaxHitPoints < RocketTankS*MaxHandlingHP then\n                TankWeight = 886.72\n                TankMaxVolume = 800\n            elseif MaxHitPoints > RocketTankM and MaxHitPoints < RocketTankM*MaxHandlingHP then\n                TankWeight = 4724.43\n                TankMaxVolume = 6400\n            elseif MaxHitPoints > RocketTankL and MaxHitPoints < RocketTankL*MaxHandlingHP then\n                TankWeight = 25741.76   \n                TankMaxVolume = 50000\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Rocket_Fuel_Tank_Handling*0.2)\n                })\n        end\n    end\nend\n\ntable.sort(tanks, function(a,b) return a.t < b.t end) -- sorting tanks table by type\n\n\n------------------------------------------------------------------------------\n-- UPDATE DATA FUNCTION --\n\nfunction UpdateData()\n    if Debug == true then \n        start = system.getTime()\n    end\n\n    ------------------------------------------------------------------------------\n    local RepairMode = false\n\n    if FirstRun == true then RepairMode = true end\n\n    local idforarrow = nil\n\n    for key, screen in pairs(screens) do -- checking screens output for action triggers\n        local o = screen.getScriptOutput()\n      --  system.print(\"output from screen \"..key..\": \"..o)\n        \n        \n            --    local c = screen.getScriptOutput() -- we get output\n\n       \n        \n        \n        \n\n        if tonumber(o) == 2 then RepairMode = true end\n\n        if string.find(o, \",\") then -- an action button has been clicked, getting the IDs\n            for screenindex, value in (o):gmatch \"(%w+)%s*,%s*(%w+)\" do\n\n                if tonumber(screenindex) == 2 then\n                    idforarrow = value\n                    RepairMode = true\n\n                elseif tonumber(screenindex) == 12 then\n                    --databank.setStringValue(\"theme\", value)\n\n                    if databank.getIntValue(\"theme\") ~= tonumber(value) then\n                        if Debug == true then system.print(\"DB Set: theme=\"..value) end\n                        databank.setIntValue(\"theme\",value)\n                    end\n\n                elseif tonumber(screenindex) == 52 then\n                    core.forceUndock(value)\n\n                elseif tonumber(screenindex) == 62 then\n                    core.forceDeboard(value)\n                end\n            end\n        end\n        \n        \n        \n        \n        \n        \n        \n        \n    end\n\n    ------------------------------------------------------------------------------\n    -- setting up variables for screens\n\n    local vars = [[\n    local version = ]]..version..[[\n    local debug = ]]..tostring(Debug)..[[\n    Theme = ]]..databank.getIntValue(\"theme\")..[[\n    Custom_Color1 = {r=]]..Custom_Color1.r..[[,g=]]..Custom_Color1.g..[[,b=]]..Custom_Color1.b..[[}\n    Custom_Color2 = {r=]]..Custom_Color2.r..[[,g=]]..Custom_Color2.g..[[,b=]]..Custom_Color2.b..[[}\n    Custom_Font_Color = {r=]]..Custom_Font_Color.r..[[,g=]]..Custom_Font_Color.g..[[,b=]]..Custom_Font_Color.b..[[}\n    Custom_Background = \"]]..Custom_Background..[[\"\n    SelectionOpacity = SelectionOpacity or ]]..SelectionOpacity..[[\n    ]]..GetHubData(Hubs,hubs)..[[\n    ]]..GetTankData(tanks)..[[\n    ]]..GetDamagedData(RepairMode,idforarrow)..[[\n    ]]..GetDockedData()..[[\n    ]]..GetBoardedData()..[[\n    local ShipName = \"]]..core.getConstructName()..[[\" \n    local ShipMass = ]]..math.floor(core.getConstructMass())..[[    \n    ]]\n\n\n    if Debug == true then\n        local duration = (system.getTime() - start)*1000\n        duration = math.floor((duration) * 100) / 100\n       -- system.print(duration)\n        debug = \"local Duration = \"..duration\n    else\n        debug = \"\"\n    end\n\n\n    for id, screen in pairs(screens) do -- for each connected screen\n\n        local c = screen.getScriptOutput() -- we get output\n\n        if string.find(c, \",\") then -- if comma found in output\n            for screenindex, value in (screen.getScriptOutput()):gmatch \"(%w+)%s*,%s*(%w+)\" do\n                c = screenindex\n            end       \n        end\n\n        if c ~= '' then  -- if output not empty\n            if c ~= databank.getStringValue(screen.id) then -- checking if value already exists in DB\n                databank.setStringValue(screen.id, c)\n                if Debug == true then system.print(\"writing to databank screenId: \"..screen.id..\" index: \"..c) end\n            end\n        end\n\n        if FirstRun == true then\n            c = databank.getStringValue(screen.id)\n            if Debug == true then system.print(\"first run, setting index from databank: \"..c..\" on screen \"..screen.id) end\n        end\n\n\n\n\n\n\n        local NewContent = {}\n        NewContent[screen.id] = vars\n        if NewContent[screen.id] ~= OldContent[screen.id] then\n            screen.setRenderScript(debug .. vars ..[[local ScreenId=]]..screen.id..[[]]..'\\n'.. screenContent)\n            screen.setScriptInput(c)\n            if Debug == true then system.print(\"updating screen \"..screen.id) end\n            OldContent[screen.id] = NewContent[screen.id]\n        end\n    end\n\nend\n-- END UPDATE DATA FUNCTION --\n------------------------------------------------------------------------------\n\nUpdateData()\nFirstRun = false\n\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"UpdateData()\n\nif vec3(unit.getMasterPlayerPosition()):len()>25 then unit.exit()end\n","filter":{"args":[{"value":"upd"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"system.print(\"inputText: \"..text)","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"2"},{"code":"screenContent = [[\n\n\nlocal json = require(\"dkjson\")\n--local data = json.decode(getInput())\ndata = getInput()\n\nScreenIndex = ScreenIndex or tonumber(data) or 1\n--setOutput(ScreenIndex)\nID = ID or 0\n\n--if type(ScreenIndex) == \"string\" then\nif string.find(ScreenIndex, \",\") then\n    for a, b in (ScreenIndex):gmatch \"(%w+)%s*,%s*(%w+)\" do\n       -- logMessage(\"comma found, setting screenIndex as \"..tonumber(a))\n        ScreenIndex = tonumber(a)\n        ID = b\n    end\nelse\n   -- ID = 0\nend\n--end\n\n\n--logMessage(\"screenindex value: \"..ScreenIndex.. \" \"..type(ScreenIndex))\n\n--Theme = Theme or 1\n\nlocal Themes = {}\nThemes[1] = {l=\"Default\",a={r=0.06,g=0.76,b=1},b={r=1,g=204/255,b=153/255},c={r=1,g=1,b=1},d=\"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"}\nThemes[2] = {l=\"Custom\",a=Custom_Color1,b=Custom_Color2,c=Custom_Font_Color,d=Custom_Background}\nThemes[3] = {l=\"Yellow&Blue\",a={r=1,g=200/255,b=27/255},b={r=1,g=1,b=1},c={r=1,g=1,b=1},d=\"assets.prod.novaquark.com/61625/bcacc064-8bd6-42d5-a9fd-8c91be03f114.jpg\"}\nThemes[4] = {l=\"Blue&Green\",a={r=18/255,g=134/255,b=168/255},b={r=50/255,g=116/255,b=52/255},c={r=1,g=1,b=1},d=\"assets.prod.novaquark.com/61625/d3fb78ed-90bd-4b2e-945a-7bbed92932e2.png\"}\nThemes[5] = {l=\"White&Blue\",a={r=1,g=1,b=1},b={r=0.06,g=0.76,b=1},c={r=0,g=0,b=0},d=\"assets.prod.novaquark.com/61625/cc4a68e2-39c5-463e-9593-c174a4d41175.jpg\"}\nThemes[6] = {l=\"Red\",a={r=132/255,g=0,b=0},b={r=226/255,g=25/255,b=25/255},c={r=1,g=1,b=1},d=\"assets.prod.novaquark.com/61625/ae249dff-af47-410a-b9f7-9d8db6f5aaed.jpg\"}\nThemes[7] = {l=\"Black&White\",a={r=1,g=1,b=1},b={r=1,g=1,b=1},c={r=1,g=1,b=1},d=\"\"}\n\nlocal color1 = Themes[Theme].a\nlocal color2 = Themes[Theme].b\nlocal fontColor = Themes[Theme].c\nlocal background = Themes[Theme].d\n\nlocal D=createLayer()\nlocal E=createLayer()\nlocal F=createLayer()\nlocal G=createLayer()\nlocal H=createLayer()\n\nlocal rx,ry=getResolution() \nlocal cx,cy=getCursor()\n\nlocal BiggestFont = loadFont(\"Play-Bold\", 30)\nlocal BiggerFont = loadFont(\"Play-Bold\", 24) \nlocal NormalFont = loadFont(\"RobotoCondensed\", 20) \nlocal SmallerFont = loadFont(\"Play-Bold\", 18) \nlocal SmallestFont = loadFont(\"RobotoCondensed\", 15)\n\n--addLine(D,rx/2,0,rx/2,ry)\n\n\n-------------------------------------------------------------\n-- FUNCTIONS --\n\nfunction DrawFrame(X,Y,Width,Height)\n    --  ___                 ___\n    -- /   \\_______________/   \\\n    -- |                       |\n    -- |                       |\n    -- |                       |\n    -- |    _______________    |\n    -- \\___/               \\___/  this is not a bone!\n    --\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(D, X, Y, X+Width,Y)-- top line\n    addLine(D, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(D,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(D,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(D,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(D,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(D,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(D,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(D,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(D,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(D,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(D,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(D,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(D,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(D,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(D,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\n\n\nfunction reformatInt(i)\n    return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n\n    if cx > X and cx < X+Width and cy > Y-5 and cy < Y+Height+10 then        \n        setNextFillColor(D,0.137,0.122,0.125,SelectionOpacity) -- box background\n        addBox(D,X-30,Y-15,Width+30,Height+40)\n        setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n        local l=20\n        addLine(D,X-30,Y-15,X-30+l,Y-15)\n        addLine(D,X-30,Y-15,X-30,Y-15+l)\n        addLine(D,X+Width,Y-15,X+Width-l,Y-15)\n        addLine(D,X+Width,Y-15,X+Width,Y-15+l)\n        addLine(D,X+Width,Y+Height+25,X+Width-l,Y+Height+25)\n        addLine(D,X+Width,Y+Height+25,X+Width,Y+Height+25-l)\n        addLine(D,X-30,Y+Height+25,X-30+l,Y+Height+25)\n        addLine(D,X-30,Y+Height+25-l,X-30,Y+Height+25)\n        setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\n\n        if getCursorReleased() then\n           -- if type(TargetIndex) == \"number\" then\n              --  if TargetIndex == 12 then \n\n               -- else\n                    ScreenIndex = TargetIndex\n                    setOutput(ScreenIndex)\n             --   end\n           -- elseif type(TargetIndex) == \"string\" then\n               -- ScreenIndex = TargetIndex\n              --  setOutput(TargetIndex)\n          --  end         \n        end\n    end \n\nend\n\nfunction DrawSmallBox(Index,X,Y,Title,TableList,Count,ShowWeight,Weight,TargetIndex)\n    local Width = rx*0.28\n    local Height = 110\n    setNextTextAlign(D, AlignH_Right, AlignV_Middle)\n    --setNextFillColor(D, color2.r, color2.g, color2.b, 1) \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n\n\n    if Count == false then\n        Count = \"\"\n    else\n        Count = \" (\" .. Count .. \")\"\n    end\n\n    addText(D,SmallerFont,Title..Count,X+Width*0.88,Y+10)\n    addLine(D, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(D, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(D, X+5, Y+28, X+5, Y+Height*0.91)    \n    local YY = Y+52\n    totalweight = 0\n\n    if ShowWeight == 1 then\n        setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        --setNextFillColor(D, color1.r, color1.g, color1.b, 1) \n        addText(D,SmallerFont,Weight .. \"T\",X-5,Y+Height+10)    \n    end\n\n    if type(TableList) == \"table\" then\n        if #TableList > 3 then  \n            max = 3\n        else\n            max = #TableList\n        end\n        for i = 1,max do \n            if tonumber(TableList[i].l) ~= nil then\n                la = Labels[TableList[i].l]\n            else\n                la = TableList[i].l\n            end\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n            addText(D, NormalFont, la .. \": \" .. math.floor(TableList[i].w) .. \" tons\" , X+16, YY)\n            YY = YY+25\n        end\n    end\n    if TargetIndex > 0 then\n        MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    end\n\nend\n\nfunction DrawCircleButton(X,Y,Size,Rotation)\n    setNextRotationDegrees(D, Rotation)\n    setNextFillColor(D, color2.r, color2.g, color2.b, 1) \n    if Rotation == 90 then\n        addTriangle(D, X+52, Y+55, X+52-Size, Y+55+Size*2, X+52+Size, Y+55+Size*2)\n    else\n        addTriangle(D, X+46, Y+55, X+46-Size, Y+55+Size*2, X+46+Size, Y+55+Size*2)\n    end\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addCircle(D, X+50, Y+70, Size*2+4)\n    setNextFillColor(D, 0, 0, 0, 1)\n    addCircle(D, X+50, Y+70, Size*2)\nend\n\nfunction DrawBackButton(X,Y,Width,Height,TargetIndex) \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Back\", X+Width*0.7,Y+Height*1.9)\n    DrawCircleButton(X,Y,15,-90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawNextButton(X,Y,Width,Height,TargetIndex)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Next\", X+18,Y+Height*1.9)\n    DrawCircleButton(X+Width*0.59,Y,15,90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0,0,0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    --setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Right, AlignV_Middle)\n    addText(D, Font, text1, X-Width/2-20,Y+Height/2)\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawVProgressBar(X,Y,Width,Height,Max,Current,text1,text2)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0,0,0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    --setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, SmallestFont, text1, X,Y+Height+15)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont,text2, X,Y+Height+35)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+Height-Current*Height/Max,Width-10,Height-(Height-Current*Height/Max),5)\nend\n\nfunction drawRadialGauge(X,Y,Size,Current,Max,Text,TankType)\n    local a1=math.floor(100/Max*Current)..\"%\" -- percent\n    local d=math.pi/180\n    local W=math.ceil(Current/Max*100)\n    local ab=100\n    local ac,ad=Size*math.cos(0),Size*math.sin(0)\n    local ae,af=Size*math.cos(360/ab*1*d),Size*math.sin(360/ab*1*d)\n    for ag=1,ab,1 do\n        local ac,ad=X+Size*math.cos((360/ab*(ag-1)+-90)*d),Y+Size*math.sin((360/ab*(ag-1)+-90)*d)\n        local ae,af=X+Size*math.cos((360/ab*ag+-90)*d),Y+Size*math.sin((360/ab*ag+-90)*d)\n        if ag<W or ag==W then\n            setNextFillColor(E,color1.r,color1.g,color1.b,1)\n        else \n            setNextFillColor(E,0,0,0,1)\n        end\n        addTriangle(E,X,Y,ac,ad,ae,af)\n    end\n    setNextFillColor(F,0.137,0.122,0.125,1)\n    addCircle(F,X,Y,Size/1.255)\n\n    if type(TankType) == 'string' then\n\n        if string.match(TankType, \"Atmospheric\") then\n            setNextFillColor(H,71/255,144/255,179/255,1) \n        elseif string.match(TankType, \"Space\") then\n            setNextFillColor(H,1,0.1,0.1,1)\n\n        elseif string.match(TankType, \"Rocket\") then\n            setNextFillColor(H,0.1,1,0.1,1)\n\n        end\n        addBox(H,X-Size/4,Y+ry*0.02,Size/2,4) \n    end\n\n    setNextFillColor(H, fontColor.r, fontColor.g, fontColor.b, 1)   \n    --setNextFillColor(H,color2.r, color2.g, color2.b,1)\n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    addText(H,SmallerFont,a1,X+(Size/15),Y+ry*0.01) -- centered percent\n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    setNextFillColor(H, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(H,SmallestFont,Text,X,Y+Size*1.6)\nend\n\n-------------------------------------------------------------\n-- BACKGROUND --\n\nlocal background = loadImage(background)\naddImage(D, background, 0, 0, rx, ry,0.2)\n\n-- background lines D\nsetDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(D,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(D,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n-- background lines F\nsetDefaultStrokeColor(F, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(F,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(F,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n\n\nsetDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\nsetDefaultStrokeWidth(D, Shape_Line, 8)\n\nDrawFrame(rx/2,33,rx-420,ry-65)\n\nsetDefaultStrokeWidth(D, Shape_Line, 3)\n\n\n\n-------------------------------------------------------------\n-- INDEX 1 --\nif ScreenIndex == 1 then\n\n    -------------------------------------------------------------\n    -- SHIP INFO --\nX = rx/2\nY = 70\n--addCircle(D,X,Y,10)\n--MakeButtonClickable(X,Y,15,15,11)\n\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"MAIN SCREEN\", rx/2, ry*0.025)\n    X = rx*0.22\n    Y = ry*0.092\n    Width = rx*0.28\n    local Height = 110\n\n    DrawSmallBox(0,X,Y,ShipName,0,false,0,0,11)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Fuel: \"..reformatInt(math.floor(TankTotalWeight/1000))..\" tons\", X+30,Y+52)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Cargo: \"..reformatInt(HubTotalWeight)..\" tons\", X+30,Y+75)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, \"Total: \"..reformatInt(math.floor(ShipMass/1000))..\" tons\", X+28,Y+105)\n\n    ---------------\n    -- HUB VBARS --\n    ---------------\n\n    Y=374\n    W = 30\n    X=rx/2-(#HubData*75)-W*2.5\n    MakeButtonClickable(150+X-60,Y,#HubData*151,140,3)\n    for i = 1, #HubData do    \n        X = X+150\n        DrawVProgressBar(X,Y,W,120,HubData[i].m,HubData[i].v,HubData[i].l,math.floor(HubData[i].v*100/HubData[i].m)..\"%   (\"..HubData[i].w..\" tons)\")\n    end\n\n\n    -----------------\n    -- FUEL GAUGES --\n    -----------------\n\n    Color = {color1.r, color1.g, color1.b}\n    X = 600\n    s = 60 - #FuelData*2.7\n    ss = math.floor(#FuelData/2) -- split gauges on each side\n    Y = ry*0.46-#FuelData*s*0.9\n    T = Y\n\n    MakeButtonClickable(865,50,100,ry-110,4)\n    MakeButtonClickable(85,50,100,ry-110,4)\n\n    for i = 1, ss do        \n        T = T + s*2.8\n        drawRadialGauge(120,T,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n    for i = ss+1, #FuelData do\n        Y = Y + s*2.8\n        drawRadialGauge(900,Y,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n\n    ----------------------\n    -- DAMAGED ELEMENTS --\n    ----------------------\n\n    Y = ry*0.092\n    Width = rx*0.36\n\n    DrawSmallBox(2,rx*0.53,Y,\"Damaged Elements\",0,BrokenCount+DamagedCount,0,0,2)\n\n    if tonumber(TotalMaxHitPoints) ~= tonumber(TotalHitPoints) then -- triangle warning\n        local Y = ry*0.18\n        local Size = 10\n        local X = rx*0.556\n        setNextFillColor(D, 247/255, 170/255, 16/255, 1) \n        addTriangle(D, X, Y, X-Size, Y+Size*2, X+Size, Y+Size*2)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, BiggerFont, \"!\", X-Size/2.85,Y+Size*2)\n    end\n\n    DrawProgressBar(rx*0.675,Y+45,200,26,TotalMaxHitPoints,TotalHitPoints,\"\",\"\",BiggerFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", rx*0.675,Y+95)\n\n\n    DrawSmallBox(0,rx*0.22,ry*0.38,\"Docked Constructs\",DockedData,#DockedData,1,reformatInt(math.floor(DockedTotalWeight/1000)),5)\n    DrawSmallBox(0,rx*0.53,ry*0.38,\"Boarded Players\",BoardedData,#BoardedData,1,reformatInt(math.floor(PlayerTotalWeight/1000)),6)\n\n\n-------------------------------------------------------------\n    -- INDEX 11 -- CONFIGURATION SCREEN\n\nelseif ScreenIndex == 11 or ScreenIndex == 12 then\n\nsetNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"CONFIGURATION SCREEN\", rx/2, ry*0.025)\n    DrawBackButton(25,10,135,43,1)\n\nX = rx*0.85\nY = ry*0.2\nWidth = 100\nHeight = 60\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggerFont, \"Change\", X,Y)\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggerFont, \"Current Theme: \"..Themes[Theme].l..\" (\"..Theme..\")\", X-250,Y)\n\n\n\n\n    if cx > X-Width*0.5 and cx < X+Width*0.5 and cy > Y-Height*0.5 and cy < Y+Height*0.5 then        \n        setNextFillColor(D,0.137,0.122,0.125,SelectionOpacity) -- box background\n        addBox(D,X-Width*0.5,Y-Height*0.5,Width,Height)\n        setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n        local l=10\n        addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5+l,Y-Height*0.5)\n        addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5,Y-Height*0.5+l)\n        addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5-l,Y-Height*0.5)\n        addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5,Y-Height*0.5+l)\n        addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5-l,Y+Height*0.5)\n        addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5,Y+Height*0.5-l)\n        addLine(D,X-Width*0.5,Y+Height*0.5,X-Width*0.5+l,Y+Height*0.5)\n        addLine(D,X-Width*0.5,Y+Height*0.5-l,X-Width*0.5,Y+Height*0.5)\n        setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\n\n        if getCursorReleased() then    \n           local m = Theme +1\n            if m +1 > #Themes then m = 1 end\n            setOutput(\"12,\"..m)\n        end\n    end \n\n  --  setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n --   setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n  --  addText(D, BiggerFont, \"Custom color1: \"..Custom_Color1.r..\",\"..Custom_Color1.g..\",\"..Custom_Color1.b, X,Y+200)\n\n\n\n\n\n\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 2 -- DAMAGED ELEMENTS DETAILS\nelseif ScreenIndex == 2 or string.find(ScreenIndex, \"2,\") then\n\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"REPAIR SCREEN\", rx/2, ry*0.025)\n\n    cc = cc or 1\n    cc = cc+1\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont,\"Scanning Ship\", rx-175,ry-30)\n    if cc > 2 then addText(D, NormalFont,\"Scanning Ship.\", rx-175,ry-30) end\n    if cc > 6 then addText(D, NormalFont,\"Scanning Ship..\", rx-175,ry-30) end\n    if cc > 10 then addText(D, NormalFont,\"Scanning Ship...\", rx-175,ry-30) end\n    if cc>14 then cc = 1 end\n\n    X = rx*0.48\n\n    Y = 40\n    drawRadialGauge(rx*0.12,Y+420,70,TotalHitPoints,TotalMaxHitPoints,\"\")\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, ShipName, rx*0.05,Y+150)\n\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, reformatInt(math.floor(TotalMaxHitPoints))..\" Max Hit Points\", rx*0.05,Y+200)\n\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)    \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", rx*0.05,Y+230)\n\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)   \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)    \n    addText(D, NormalFont, reformatInt(math.floor(DamagedCount))..\" Damaged Elements\", rx*0.05,Y+280)\n\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)   \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)    \n    addText(D, NormalFont, reformatInt(math.floor(BrokenCount))..\" Broken Elements\", rx*0.05,Y+310)\n\n    DrawBackButton(25,10,135,43,1)\n\n    X = 650\n    Y = 50\n    if type(DamagedElements) == 'table' then\n        if #DamagedElements > 0 then\n\n            -- DrawFrame(X,Y,260,110) -- arrows\n            Size=20\n\n            setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n\n            setNextRotationDegrees(D, 90)\n            setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n            addTriangle(D, X-210, Y+45, X-210-Size, Y+45+Size*2, X-210+Size, Y+45+Size*2)\n            setNextStrokeWidth(D,8)\n\n            addLine(D,X-210-Size, Y+45+Size*2/2,X-60-210-Size, Y+45+Size*2/2)\n\n            setNextRotationDegrees(D, -90)\n            setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n\n            addTriangle(D, X+209, Y+45, X+209-Size, Y+45+Size*2, X+209+Size, Y+45+Size*2)\n\n            setNextStrokeWidth(D,8)\n\n            addLine(D,X+209+Size, Y+45+Size*2/2,X+60+209+Size, Y+45+Size*2/2)\n\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n            setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n            addText(D, BiggerFont,DamagedElements[1].l, X,Y+30)\n            DrawProgressBar(X,Y+20+30,350,35,DamagedElements[1].m,DamagedElements[1].w,\"\",\"\",BiggerFont)\n            setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n            addText(D, BiggerFont,math.floor(DamagedElements[1].w)..\"/\"..math.floor(DamagedElements[1].m), X,Y+104)\n\n            Y = 140\n            for i=2, #DamagedElements do\n\n                if (i % 2 == 0) then --it is even\n                    X = 500   \n                    Y=Y+65\n                else --it is odd\n                    X = 800  \n\n                end\n\n                setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n                setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n                addText(D, SmallerFont,DamagedElements[i].l, X,Y)\n                DrawProgressBar(X,Y+20,230,15,DamagedElements[i].m,DamagedElements[i].w,\"\",\"\",BiggerFont)\n                MakeButtonClickable(X-105,Y-5,240,30,\"2,\"..DamagedElements[i].id)\n                --MakeButtonClickable(X-105,Y-5,240,30,0)\n            end\n        else\n--            setNextFillColor(D,0.1,1,0.1,1)\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1) \n            setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n            addText(D, BiggestFont, \"SHIP UNDAMAGED\", rx/2,ry/2)\naddLine(D,rx/2-150,ry/2+30,rx/2+150,ry/2+30)\naddLine(D,rx/2-160,ry/2-30,rx/2+160,ry/2-30)\n            --DrawFrame(rx/2,ry/2-50,180,120) \n        end\n    end\n    -------------------------------------------------------------\n    -- INDEX 3 -- HUBS SCREEN\n\nelseif ScreenIndex == 3 then\n    \n    X = rx*0.5\n    Y = ry*0.1701\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, #HubData..\" Container Hubs\",X, Y+6)\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"Total Hubs Weight: \"..math.floor(HubTotalWeight)..\" tons\", X, Y-4)\n\n\n\n\n\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"HUBS SCREEN\", rx/2, ry*0.025)\n    Width = rx*0.36\n    Y = ry*0.1\n\n  --  setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n  --  setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n  --  addText(D, BiggestFont, #HubData..\" Hubs\", rx*0.59,Y+95)\n\n    X = rx*0.5\n    Y = ry*0.1\n    Width = 400\n    Height = 50\n\n    if #HubData < 5 then\n        Y = ry*0.35-(ry*0.06*#HubData)\n    end\n\n    for i = 1, #HubData do\n        Y = Y+80\n        DrawProgressBar(X,Y,Width,Height,HubData[i].m,HubData[i].v,HubData[i].l,\" \"..math.floor(HubData[i].v*100/HubData[i].m)..\"%\" ..\"    (\"..HubData[i].w..\" tons)\",NormalFont)\n    end\n\n    DrawBackButton(25,10,135,43,1)\n\n\n    DrawNextButton(rx-210,10,135,43,31)\n\n    -------------------------------------------------------------\n    -- INDEX 31 --\n\nelseif ScreenIndex == 31 then\n\n\n\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[1].l, rx*0.5,ry*0.17)\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[1].m,HubData[1].v,\"\",math.floor(HubData[1].v*100/HubData[1].m)..\"%\",NormalFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[1].w..\" tons\", rx*0.5,ry*0.88)\n\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,3) end\n\n    if #HubData > 1 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,32) end\n    end\n\n\n\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 32 --\n\nelseif ScreenIndex == 32 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[2].l, rx*0.5,ry*0.17)\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[2].m,HubData[2].v,\"\",math.floor(HubData[2].v*100/HubData[2].m)..\"%\",NormalFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[2].w..\" tons\", rx*0.5,ry*0.88)\n\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,31) end\n\n    if #HubData > 2 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,33) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 33 --\n\nelseif ScreenIndex == 33 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[3].l, rx*0.5,ry*0.17)\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[3].m,HubData[3].v,\"\",math.floor(HubData[3].v*100/HubData[3].m)..\"%\",NormalFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[3].w..\" tons\", rx*0.5,ry*0.88)\n\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,32) end\n\n    if #HubData > 3 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,34) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 34 --\n\nelseif ScreenIndex == 34 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[4].l, rx*0.5,ry*0.17)\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[4].m,HubData[4].v,\"\",math.floor(HubData[4].v*100/HubData[4].m)..\"%\",NormalFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, HubData[4].w..\" tons\", rx*0.5,ry*0.88)\n\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,135,43,33) end\n\n\n\n\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 4 --\n\nelseif ScreenIndex == 4 then\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"FUEL SCREEN\", rx/2, ry*0.025)\n\n\n\n\n    X = rx*0.5\n    Y = ry*0.1701   \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, #FuelData..\" Fuel Tanks\",X, Y+6)\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"Total Fuel Weight: \"..math.floor(TankTotalWeight/1000)..\" tons\", X, Y-4)\n\n\n\n\n\n\n\n\n    -- if (i % 2 == 0) then --it is even\n    --   X = 280             \n    -- else --it is odd\n    -- X = 745     \n    -- end\n\n\n\n\n   -- DrawSmallBox(3,rx*0.55,ry*0.1,\"Fuel Tanks\",0,#FuelData,1,math.floor(TankTotalWeight/1000),0)\n\n    rocket = 0\n    atmo = 0\n    space = 0\n    for i=1, #FuelData do\n        if string.match(FuelData[i].t,\"Space\") then\n            space = space +1\n        elseif string.match(FuelData[i].t,\"Atmospheric\") then\n            atmo = atmo +1\n        elseif string.match(FuelData[i].t,\"Rocket\") then\n            rocket = rocket +1\n        end\n    end\n\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, NormalFont, space ..\" Space\", rx*0.72,ry*0.1+40)\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n\n\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, NormalFont, atmo ..\" Atmospheric\", rx*0.72,ry*0.1+65)\n    setNextTextAlign(D, AlignH_Left, AlignV_Middle)\n\n\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, NormalFont, rocket ..\" Rocket\", rx*0.72,ry*0.1+90)\n\n    if #FuelData > 6 then -- two rows\n        X = rx*0.35\n        Width = 120\n        Height = 25\n        Y = ry*0.25\n        O = 50-#FuelData\n\n\n        for i = 1, math.floor(#FuelData/2) do\n            Y = Y+O\n            DrawProgressBar(X*0.90,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\n        end\n        Y = ry*0.25\n        for i = math.floor(#FuelData-#FuelData/2)+1, #FuelData do\n            Y = Y+O\n            DrawProgressBar(X*2.2,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\n        end\n\n    else\n        X = rx*0.5\n        Width = 400\n        Height = 50-#FuelData*3\n        Y = ry*0.2\n        O = 78-#FuelData*5\n        for i = 1, #FuelData do    \n            Y = Y+O\n            DrawProgressBar(X,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",NormalFont)\n        end\n    end\n\n    DrawBackButton(25,10,135,43,1)\n\n    -------------------------------------------------------------\n    -- INDEX 5 -- DOCKED CONSTRUCTS SCREEN\n\nelseif ScreenIndex == 5 or ScreenIndex == 52 then\n    X = rx*0.5\n    Y = ry*0.1701\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"DOCKED CONSTRUCTS SCREEN\", X, ry*0.025)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, \"Select construct to undock\",X, Y+6)\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"Total Docked Weight: \"..math.floor(DockedTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #DockedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, BiggerFont, DockedData[i].l ..\" (\"..DockedData[i].w..\" tons)\", X,Y)\n        MakeButtonClickable(X-175,Y-20,380,30,\"51,\"..DockedData[i].id)\n\n    end\n\n\nelseif ScreenIndex == 51 then\n    DrawBackButton(25,10,135,43,5)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"FORCE UNDOCK \" .. ID ..\" ?\", rx/2,ry*0.3)\n    --addText(D, BiggerFont, ID ..\" ( tons)\", X,Y)\n\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"52,\"..ID)\n\n\n    -------------------------------------------------------------\n    -- INDEX 6 --\n\nelseif ScreenIndex == 6 or ScreenIndex == 62 then\n\n\n        X = rx*0.5\n    Y = ry*0.1701\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, SmallestFont, \"BOARDED PLAYERS SCREEN\", X, ry*0.025)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, \"Select player to deboard\",X, Y+6)\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"Total Players Weight: \"..math.floor(PlayerTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #BoardedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, BiggerFont, BoardedData[i].l ..\" (\"..BoardedData[i].w..\" tons)\", X,Y)\n        MakeButtonClickable(X-175,Y-20,380,30,\"61,\"..BoardedData[i].id)\n\n    end\n\nelseif ScreenIndex == 61 then\n    DrawBackButton(25,10,135,43,6)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggestFont, \"FORCE DEBOARD \" .. ID ..\" ?\", rx/2,ry*0.3)\n    --addText(D, BiggerFont, ID ..\" ( tons)\", X,Y)\n\n\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    addText(D, BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"62,\"..ID)\n\n\nend\n\n-------------------------------------------------------------\n-- BOTTOM SCREEN INFOS --\nsetNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \nsetNextTextAlign(D, AlignH_Center, AlignV_Middle)\naddText(D, SmallestFont, \"SHIP INFO v\" .. version, rx/2, ry*0.975)\n\n\nif debug == true then\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Loop:\"..Duration, rx*0.25,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Index:\"..ScreenIndex, rx/2+235,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"ScreenId:\"..ScreenId, rx/2+145,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    --setNextTextAlign(D, AlignH_Center, AlignV_Middle) \n    addText(D, SmallestFont, \"Rendering:\"..math.floor((getRenderCost()*100)/getRenderCostMax())..\"%\", rx/2.9, ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    --setNextTextAlign(D, AlignH_Center, AlignV_Middle) \n    addText(D, SmallestFont, \"Input:\"..#getInput()..\"/1024\", rx/1.8, ry*0.984)\nend\n\n\nrequestAnimationFrame(1) \n\n\n\n\n\n\n        ]]\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"},{"code":"\n\nfunction ReadDatabank()\n     local t = json.decode(databank.getStringValue('index'))\n   -- databank.clear()\n    local nb = databank.getNbKeys()\n    local keys = databank.getKeys()\n    system.print(keys .. \" keys\")\n    system.print(nb .. \" keys\")\n    for i = 1, #t do \n      -- system.print(\"screenID: \"..t[i].id..\" index: \"..t[i].index)\n     --   system.print(t[i].index)\n       -- system.print(\"screenID: \".. t[i].id .. \" index-> \".. t[i].index)\n\n    end\n    \n    for i = 1, nb do\n      --  system.print(\"key #\"..keys[i])\n    end\n    \n    \n    for slot, key  in pairs(json.decode(keys))do \n       local j = databank.getStringValue(key)\n    system.print(slot .. \" - \" .. key .. j)\n        \n    end \n--end\n    \n    \n    \n    \n    \nreturn t\n\n    \n    end\n\n\n\n\nfunction GetHubData(Hubs,hubs)\n    local z = 0\n    local d = 'local HubData = {}'\n    for i = 1, #Hubs do\n        w = math.floor(hubs[i].getItemsMass()/1000)\n        d = d..[[            \n        HubData[]]..i..[[]= {\n        l=\"]]..Hubs[i].l..[[\",\n        m= ]]..Hubs[i].m..[[,\n        v= ]]..math.floor(hubs[i].getItemsVolume())..[[,\n        w= ]]..w..[[}]]\n        z = z + w\n    end    \n    d = d..[[ local HubTotalWeight = ]]..z\n    return d\nend\n\nfunction GetTankData(tanks)\n    local z = 0   \n    local d = 'local FuelData = {}'\n    for i = 1, #tanks do\n        local w = core.getElementMassById(tanks[i].id)\n        if string.match(tanks[i].t, \"Atmospheric\") then\n            f = 4\n        elseif string.match(tanks[i].t, \"Space\") then\n            f = 6\n        elseif string.match(tanks[i].t, \"Rocket\") then\n            f = 0.8\n        end        \n        d = d..[[            \n        FuelData[]]..i..[[]= {\n        l=\"]]..tanks[i].l..[[\",\n        m= ]].. tanks[i].m ..[[,\n        v= ]]..math.floor((w - tanks[i].u)/f*(1+Container_Optimization/10+Fuel_Tank_Optimization/10))..[[,\n        t= \"]]..tanks[i].t..[[\",\n        w= ]]..math.floor((w - tanks[i].u)/1000)..[[}]]\n        z = z + w - tanks[i].u\n    end\n    d = d..[[local TankTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDockedData()\n    local d = 'local DockedData = {}'\n    local z = 0\n    local a = core.getDockedConstructs()\n    for i = 1, #a do\n        w = core.getDockedConstructMass(a[i])\n        z = z + w\n        d = d..[[\n        DockedData[]]..i..[[]= {\n        l=\"Construct []]..a[i]..[[]\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local DockedTotalWeight = ]]..z\n    return d\nend\n\nfunction GetBoardedData()\n    local d = 'local BoardedData = {}'\n    local z = 0\n    local a = core.getPlayersOnBoard()\n    for i = 1, #a do\n        w = core.getBoardedPlayerMass(a[i])\n        z = z + w\n        d = d..[[\n        BoardedData[]]..i..[[]= {\n        l=\"[]]..system.getPlayerName(a[i])..[[]\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local PlayerTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDamagedData(r,idforarrow)\n\n    core.deleteSticker(a1)\n    core.deleteSticker(a2)\n    core.deleteSticker(a3)\n    core.deleteSticker(a4)\n    core.deleteSticker(a5)\n    core.deleteSticker(a6)\n\n    local d = 'local DamagedElements = {}' -- initializing data as string\n\n    BrokenCount = BrokenCount or 0\n    DamagedCount = DamagedCount or 0\n    TotalMaxHitPoints = TotalMaxHitPoints or 0\n    TotalHitPoints = TotalHitPoints or 0\n\n    if r == true then -- if repair mode\n\n        BrokenCount = 0\n        DamagedCount = 0\n        TotalMaxHitPoints = 0\n        TotalHitPoints = 0\n        local t = {}\n\n       -- system.print(\"RepairMode: \"..tostring(r)..\" FirstRun: \"..tostring(FirstRun))\n\n        local elements = core.getElementIdList()\n\n        for i = 1, #elements do \n\n            local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n            local HitPoints = core.getElementHitPointsById(elements[i])\n\n            TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n            TotalHitPoints = TotalHitPoints + HitPoints\n\n            if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n                if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n                if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n\n                table.insert(t,{\n                        l = core.getElementNameById(elements[i]),\n                        w = HitPoints,\n                        id = elements[i],\n                        m = MaxHitPoints\n                    })\n            end\n        end\n\n        table.insert(t,1,{\n                l = core.getElementNameById(idforarrow),\n                w = core.getElementHitPointsById(idforarrow),\n                id = idforarrow,\n                m = core.getElementMaxHitPointsById(idforarrow)\n            })\n\n        if t[1].w == t[1].m then -- if first entry HP full\n            table.remove(t,1) -- then remove it\n        end\n\n        local at = {}\n        for i = 1, 10 do \n            if i < #t+1 then -- limiting table to 10 lines\n                table.insert(at,{\n                        l = t[i].l,\n                        id = t[i].id,\n                        m = t[i].m,\n                        w = t[i].w})\n            end\n        end\n\n        if #t > 0 then\n            local pos = core.getElementPositionById(at[1].id) -- show arrow for first entry\n            a1 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"up\")\n            a2 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"south\")\n            a3 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"west\")\n            a4 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"east\")\n            a5 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"north\")\n            a6 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"down\")\n        end\n\n        --d = 'local DamagedElements = {}'\n        for i=1, #at do\n            d = d..[[\n            DamagedElements[]].. i .. [[]= {\n            l=\"]].. at[i].l..[[\",\n            id= ]].. at[i].id ..[[,\n            m= ]].. at[i].m ..[[,\n            w= ]].. at[i].w ..[[}]]\n        end\n\n    end\n    d = d..[[\n    local TotalMaxHitPoints = ]]..TotalMaxHitPoints..[[\n    local TotalHitPoints = ]]..TotalHitPoints..[[\n    local BrokenCount= ]].. BrokenCount ..[[\n    local DamagedCount= ]].. DamagedCount ..[[]]\n\n    -- system.print(\"table t: \"..#t..\" entries\")\n    return d\n\nend\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"4"}],"methods":[],"events":[]}
