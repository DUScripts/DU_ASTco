{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"------------------------------------------------------------------------------\n------ Ship Info by Krengus ------\nversion = 0.21 -- support and feedback: https://discord.gg/BfnbtFyHrt\n\n------------------------------------------------------------------------------\n-- USER VARIABLES --\n\nHub1_Max_Volume = 12000 --export\nHub2_Max_Volume = 487500 --export\nHub3_Max_Volume = 12000 --export\nHub4_Max_Volume = 12000 --export\n\nContainer_Optimization = 5 --export\nFuel_Tank_Optimization = 5 --export\nSpace_Fuel_Tank_Handling = 5 --export\nAtmo_Fuel_Tank_Handling = 5 --export\nRocket_Fuel_Tank_Handling = 5 --export\n\ncolor1 = {r=0.06,g=0.76,b=1} \ncolor2 = {r=1,g=204/255,b=153/255}\n\n--background = \"assets.prod.novaquark.com/61625/2b9422dc-dd18-4b00-b16b-d3cb3f2eff33.jpg\"\n--background = \"assets.prod.novaquark.com/61625/5e69e935-94b8-46a5-bef2-2726ccd0687c.jpg\" \nbackground = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\" --export\n\nRefresh_Rate = 1 --export\nShow_Unit = true --export\nDebug = false --export\n\n\n\n------------------------------------------------------------------------------\n-- SCRIPT START --\n\nMaxHandlingHP = 1.2 -- multiplier for maxed HP handling talents\n-- base hitpoints, used to find out tank size and weight        \nAtmoTankXS = 49\nAtmoTankS = 162\nAtmoTankM = 1314\nAtmoTankL = 10460\nSpaceTankXS = 49\nSpaceTankS = 186\nSpaceTankM = 1495\nSpaceTankL = 15932\nRocketTankXS = 365\nRocketTankS = 735\nRocketTankM = 6230\nRocketTankL = 68823\n\nArrowShown = false\nFirstRun = true\nOldContent = {}\n\nif Debug == true then \n    start = system.getTime()\nend\n\nlocal screens =  {}\nlocal hubs = {}\n\nfor slot,element in pairs(unit)do \n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getElementClass then\n            if element.getElementClass()==\"ScreenUnit\"then \n                screens[#screens+1]=element\n            elseif element.getElementClass()==\"CoreUnitDynamic\"then \n                core=element\n            elseif element.getElementClass()==\"ItemContainer\"then\n                hubs[#hubs+1]=element\n                hubs[#hubs].slot=slot\n            end \n        end \n    end \nend\n\nif not next(screens) then\n    system.print(\"No screen found\")\n    unit.exit()\nend\n\nif core == nil then\n    system.print(\"No core found\")\n    unit.exit()\nend\n\nif not next(hubs) then\n    system.print(\"No hub found\")\n    unit.exit()\nend\n\n\n\n-- Initial hub table\n\n\nlocal HubMaxVol = {Hub1_Max_Volume,Hub2_Max_Volume,Hub3_Max_Volume,Hub4_Max_Volume}\n\n\ntable.sort(hubs, function(a,b) return a.slot < b.slot end) -- sorting hubs table by slot\n\nlocal Hubs = {}\nfor i=1, #hubs do\n    Hubs[i] = {\n        l = core.getElementNameById(hubs[i].getId()),\n        m = HubMaxVol[i],\n        v = math.floor(hubs[i].getItemsVolume()),\n        w = math.floor(hubs[i].getItemsMass()/1000)\n    }\nend\n\n\n\n\nfunction FormatTable(arr)\n    table.sort(arr, function(a,b) return a.w > b.w end) -- sorting table, heaviest first\n    local a = {}\n    for i = 1, 3 do \n        if i < #arr+1 then -- limiting table to 3 lines\n            table.insert(a,{l = arr[i].l,w = math.floor(arr[i].w)})\n        end\n    end\n    return a\nend\n\n-- Initial tank table\n\nlocal tanks = {}\nlocal TotalMaxHitPoints = 0\nlocal TotalHitPoints = 0\nlocal BrokenCount = 0\nlocal DamagedCount = 0\n\nlocal elements = core.getElementIdList()\n  --  local DamagedElements = '' -- initializing data as string\n\n\n\nfor i = 1, #elements do -- building tanks and HP initial table\n\n    local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n    local ElementType = core.getElementTypeById(elements[i]) \n    local HitPoints = core.getElementHitPointsById(elements[i])\n    \n    if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n        --  if HitPoints < MaxHitPoints then\n        if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n        if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n    end\n\n    TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n    TotalHitPoints = TotalHitPoints + HitPoints\n\n --   if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n   --     if HitPoints == 0 then Broken = Broken +1 end\n   --    if HitPoints > 0 then Damaged = Damaged +1 end\n  --  end\n\n    if string.match(ElementType, \"Fuel Tank\") then\n        -- local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n        -- local ElementMass = core.getElementMassById(elements[i])\n        local ElementName = core.getElementNameById(elements[i])\n\n        -- 4 -- natron\n        -- 6 -- xergon\n        -- 0.8 -- rocket\n\n        if string.match(ElementType, \"Atmospheric Fuel Tank\") then\n            if MaxHitPoints > AtmoTankXS and MaxHitPoints < AtmoTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > AtmoTankS and MaxHitPoints < AtmoTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > AtmoTankM and MaxHitPoints < AtmoTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > AtmoTankL and MaxHitPoints < AtmoTankL*MaxHandlingHP then\n                TankWeight = 5481.27            \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Atmo_Fuel_Tank_Handling*0.2)\n                })\n            \n        elseif string.match(ElementType, \"Space Fuel Tank\") then\n            if MaxHitPoints > SpaceTankXS and MaxHitPoints < SpaceTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > SpaceTankS and MaxHitPoints < SpaceTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > SpaceTankM and MaxHitPoints < SpaceTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > SpaceTankL and MaxHitPoints < SpaceTankL*MaxHandlingHP then\n                TankWeight = 5481.27  \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Space_Fuel_Tank_Handling*0.2)\n                })\n            \n        elseif string.match(ElementType, \"Rocket Fuel Tank\") then\n            if MaxHitPoints > RocketTankXS and MaxHitPoints < RocketTankXS*MaxHandlingHP then\n                TankWeight = 173.42\n                TankMaxVolume = 400\n            elseif MaxHitPoints > RocketTankS and MaxHitPoints < RocketTankS*MaxHandlingHP then\n                TankWeight = 886.72\n                TankMaxVolume = 800\n            elseif MaxHitPoints > RocketTankM and MaxHitPoints < RocketTankM*MaxHandlingHP then\n                TankWeight = 4724.43\n                TankMaxVolume = 6400\n            elseif MaxHitPoints > RocketTankL and MaxHitPoints < RocketTankL*MaxHandlingHP then\n                TankWeight = 25741.76   \n                TankMaxVolume = 50000\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = ElementName,\n                    m = TankMaxVolume*(1+Rocket_Fuel_Tank_Handling*0.2)\n                })\n        end\n    end\nend\n\ntable.sort(tanks, function(a,b) return a.t < b.t end) -- sorting tanks table by type\n\n\n------------------------------------------------------------------------------\n-- UPDATE DATA FUNCTION --\n\nfunction UpdateData()\n\n    ------------------------------------------------------------------------------\n    -- LINKED HUBS --\nlocal HubData = GetHubData(Hubs,hubs)\nlocal FuelData = GetTankData(tanks)\n    \n    ------------------------------------------------------------------------------\n    -- DAMAGED ELEMENTS --\n    RepairMode = false\n    \n\n    for key, screen in pairs(screens) do        \n        for x in string.gmatch(screen.getScriptOutput(), \"([^,]+)\") do\n            if tonumber(x) == 2 then -- if repair screen active\n                RepairMode = true\n            end\n        end\n    end\n\n\n    if RepairMode == true or FirstRun == true then\n        DamagedElements = 'local DamagedElements = {}' -- initializing data as string\n\n\n       -- system.print(\"RepairMode: \"..tostring(RepairMode)..\" FirstRun: \"..tostring(FirstRun))\n\n        local BrokenCount = 0\n    local DamagedCount = 0\n        local TotalMaxHitPoints = 0\n        local TotalHitPoints = 0\n        --DamagedElements = 'local DamagedElements = {}' -- initializing data as string\n        local elements = core.getElementIdList()\n        local j = 0\n        local idforarrow = 0\n\n        for i = 1, #elements do \n\n            local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n            local HitPoints = core.getElementHitPointsById(elements[i])\n\n\n\n            TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n            TotalHitPoints = TotalHitPoints + HitPoints\n\n\n            if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n                --  if HitPoints < MaxHitPoints then\n                if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n                if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n                --  end\nj = j +1\n                --if idforarrow == nil then \n                \n                \n                if j < 11 then\n                    idforarrow = elements[i] \n                    DamagedElements = DamagedElements..[[\n                    DamagedElements[#DamagedElements+1]= {\n                    l=\"]]..core.getElementNameById(elements[i])..[[\",\n                    id= ]].. elements[i] ..[[,\n                    m= ]].. MaxHitPoints ..[[,\n                    w= ]]..HitPoints..[[}]]\n                end\n\n\n                --    if j < 20 then\n                --  system.print(\"adding element \"..core.getElementNameById(elements[i]))\n                --DamagedList[#DamagedList+1] = {\"id\"=elements[i],\"hp\"=HitPoints}\n\n                \n\n\n                    -- system.print(DamagedElements)\n\n             --   end\n\n\n            end\n        end\n        \n     --   DamagedElements = DamagedElements..[[ \n     --   local BrokenCount= ]].. BrokenCount ..[[\n     --   local DamagedCount= ]].. DamagedCount ..[[\n     --   ]]\n\n        if ArrowShown == false and idforarrow > 0 and FirstRun == false then\n            local pos = core.getElementPositionById(idforarrow)\n            a1 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"up\")\n            a2 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"south\")\n            a3 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"west\")\n            a4 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"east\")\n            a5 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"north\")\n            a6 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"down\")\n            ArrowShown = true\n        end\n\n\n\n    else\n        if ArrowShown == true and RepairMode == false then\n            core.deleteSticker(a1)\n            core.deleteSticker(a2)\n            core.deleteSticker(a3)\n            core.deleteSticker(a4)\n            core.deleteSticker(a5)\n            core.deleteSticker(a6)\n            ArrowShown = false\n        end\n\n\n\n    end\nFirstRun = false\n    --system.print(\"damaged or broken elements: \"..j)\n    -- return DamagedElements\n    --end\n\n\n\n\n\n\n\n    --    RepairMode = false\n\n\n --   local regxEverythingExceptComma = \"([^,]+)\"\n\n    \n    \n\n\n    \n\n   \n       -- local DamagedElements = CheckDamage(core) \n        \n       \n        \n        \n        \n  --  end\n    \n  --  system.print(\"RepairMode= \".. tostring(RepairMode))\n    \n  \n    \n    \n   \n    \n    \n    \n   \n    ------------------------------------------------------------------------------\n    -- DOCKED CONSTRUCTS --\n\n    local DockedList = {}\n    local DockedTotalWeight = 0\n\n    for key, construct in pairs(core.getDockedConstructs()) do\n        local Mass = core.getDockedConstructMass(construct)\n        DockedTotalWeight = DockedTotalWeight + Mass\n        table.insert(DockedList, {\n                l = \"Construct [\"..construct..\"]\",\n                w = math.floor(Mass/1000)})\n    end\n\n    ------------------------------------------------------------------------------\n    -- BOARDED PLAYERS --\n\n    local PlayerList = {}\n    local PlayerTotalWeight = 0\n    for key, Player in pairs(core.getPlayersOnBoard()) do\n        local Mass = core.getBoardedPlayerMass(Player)\n        PlayerTotalWeight = PlayerTotalWeight + Mass\n        table.insert(PlayerList, {\n                l = system.getPlayerName(Player),\n                w = math.floor(Mass/1000)})\n    end\n\n    ------------------------------------------------------------------------------\n    -- setting up variables for screens\n\n    vars = [[\n    local version = ]]..version..[[\n    local debug = ]]..tostring(Debug)..[[\n    local background = \"]]..background..[[\"\n    local color1 = {r=]]..color1.r..[[,g=]]..color1.g..[[,b=]]..color1.b..[[}\n    local color2 = {r=]]..color2.r..[[,g=]]..color2.g..[[,b=]]..color2.b..[[}\n\n    ]]..FuelData..[[\n\n    ]]..HubData..[[\n\n    ]]..DamagedElements..[[\n\n    local ShipName = \"]]..core.getConstructName()..[[\"\n    local TotalMaxHitPoints = ]]..TotalMaxHitPoints..[[\n    local TotalHitPoints = ]]..TotalHitPoints..[[\n    local BrokenCount= ]].. BrokenCount ..[[\n    local DamagedCount= ]].. DamagedCount ..[[\n    local ShipMass = ]]..math.floor(core.getConstructMass())..[[\n    \n    local data = {}\n    ]]\n\n\n    local json = require(\"dkjson\")\n    for key, screen in pairs(screens) do -- updating screens input\n       -- system.print(\" -- \"..key)\n       -- OldContent[key] = OldContent[key] or ''\n        data = {\n            k = FormatTable(DockedList),\n            l = #DockedList,\n            m = math.floor(DockedTotalWeight),\n            n = FormatTable(PlayerList),\n            o = #PlayerList,\n            p = math.floor(PlayerTotalWeight),\n         --   q = FormatTable(DamagedElements),\n          --  r = #DamagedElements,\n            t = screen.getScriptOutput()\n        }\n\n        if json.encode(data) ~= OldContent[key] then\n            screen.setRenderScript(vars ..'\\n'.. screenContent)\n            screen.setScriptInput(json.encode(data))\n            if Debug == true then system.print(\"updating screen \"..key) end\n            OldContent[key] = json.encode(data)\n        end\n        \n        -- for a in string.gmatch(data.t, '([^,]+)') do\n        -- if string.match(data.t,'true') then \n        --    RepairMode = true \n        --  end            \n        -- end\n    end\n   -- OldContent[screen] = json.encode(data)\nend\n\n-- END UPDATE DATA FUNCTION --\n------------------------------------------------------------------------------\n\nUpdateData()\n\nif Debug == true then\n    local duration = (system.getTime() - start)*1000\n    duration = math.floor((duration) * 100) / 100 .. \" vs\"\n    system.print(duration)\nend\n\nunit.setTimer(\"upd\",Refresh_Rate)\nif Show_Unit == false then unit.hide() end\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"UpdateData()\n","filter":{"args":[{"value":"upd"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"screenContent = [[\n\nlocal json = require(\"dkjson\")\ndata = json.decode(getInput())\n\ndata.DockedList = data.k \ndata.DockedCount = data.l \ndata.DockedTotalWeight = data.m \ndata.PlayerList = data.n \ndata.PlayerCount = data.o \ndata.PlayerTotalWeight = data.p \n--data.ScreenIndex = string.sub(data.t, 1, 1)\ndata.ScreenIndex = data.t\n\nlocal layer = createLayer()\nlocal E=createLayer()\nlocal F=createLayer()\nlocal G=createLayer()\nlocal H=createLayer()\nlocal rx, ry = getResolution() \nlocal cx, cy = getCursor()\nlocal subtitlefont = loadFont(\"FiraMono-Bold\", 18) \nlocal textfont = loadFont(\"RobotoCondensed\", 15)\nlocal titlefont = loadFont(\"Play-Bold\", 30)\nlocal font3 = loadFont(\"RobotoCondensed\", 20) \nlocal font = loadFont(\"Play-Bold\", 24) \n\n--addLine(layer,rx/2,0,rx/2,ry)\n\nScreenIndex = ScreenIndex or tonumber(data.ScreenIndex) or 1\n\n\n-- background frame\n\n--X = rx/10\n--Y = 25\n--addLine(layer, X*2+5, Y, rx-X*2,Y)-- top line\n--addLine(layer,X*2-15+5,Y-10 , X*2+5, Y)-- top left curve\n--addLine(layer,rx*0.04+5, Y-10 , X*2-15+5,Y-10)-- top left line\n--addLine(layer,rx-X*2, Y , rx-X*2+15,Y-10)-- top right curve\n--addLine(layer,rx-X*2+15,Y-10 , rx*0.96-15,Y-10)-- top right line\n--addLine(layer,rx*0.96-15,Y-10 , rx*0.96+20,Y+10)-- top right corner\n--addLine(layer,rx*0.96+20,Y+10 ,rx*0.96+20,ry-Y-10)-- right line\n--addLine(layer,rx*0.96+20,ry-Y-10 , rx*0.96-15,ry-Y+10)-- bottom right corner\n--addLine(layer,rx*0.04-25,ry-Y-10 , rx*0.04+5, ry-Y+10)-- bottom left corner\n--addLine(layer,rx*0.04-25,Y+10 , rx*0.04-25,ry-Y-10)-- left line\n--addLine(layer,rx*0.04-25,Y+10 , rx*0.04+5, Y-10)-- top left corner\n--addLine(layer, X*2+5, ry-Y, rx-X*2,ry-Y)-- bottom line\n--addLine(layer,X*2-15+5,ry-Y+10 ,X*2+5, ry-Y )-- bottom left curve\n--addLine(layer,rx-X*2,ry-Y ,rx-X*2+15, ry-Y+10 )-- bottom right curve\n--addLine(layer,rx-X*2+15, ry-Y+10 , rx*0.96-15,ry-Y+10)-- bottom right line\n--addLine(layer,rx*0.04+5, ry-Y+10 , X*2-15+5,ry-Y+10)-- bottom left line\n\n\n-------------------------------------------------------------\n-- FUNCTIONS --\n\n\n\nfunction DrawFrame(X,Y,Width,Height)\n    --  ___                 ___\n    -- /   \\_______________/   \\\n    -- |                       |\n    -- |                       |\n    -- |                       |\n    -- |    _______________    |\n    -- \\___/               \\___/\n    --\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(layer, X, Y, X+Width,Y)-- top line\n    addLine(layer, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(layer,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(layer,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(layer,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(layer,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(layer,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(layer,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(layer,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(layer,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(layer,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(layer,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(layer,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(layer,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(layer,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(layer,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\n\n\n--DrawFrame(rx/2,155,430,280) -- 1 hub on xs screen\n\n--DrawFrame(rx/2,30,rx-420,ry-70) -- full screen\n\nfunction reformatInt(i)\n    return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n\n    if cx > X and cx < X+Width and cy > Y and cy < Y+Height then        \n          setNextShadow(layer, 10, 0.137,0.122,0.125, 0.5)\n        --setNextStrokeWidth(layer,3)\n       -- setNextStrokeColor(layer, color2.r, color2.g, color2.b, 1)\n        setNextFillColor(layer,0.137,0.122,0.125,0.9)\n        addBoxRounded(layer,X-30,Y-15,Width+30,Height+40,25)\n        if getCursorReleased() then\n\nif TargetIndex == 0 then \nelse\n   ScreenIndex = TargetIndex\n            setOutput(ScreenIndex)\nend\n\n\n         \n        end\n    end \nend\n\nfunction DrawSmallBox(Index,X,Y,Title,TableList,Count,ShowWeight,Weight,TargetIndex)\n    local Width = rx*0.28\n    local Height = 110\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n\n    if Count == false then\n        Count = \"\"\n    else\n        Count = \" (\" .. Count .. \")\"\n    end\n\n    addText(layer,subtitlefont,Title..Count,X+Width*0.88,Y+10)\n    addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)    \n    local YY = Y+52\n    totalweight = 0\n\n    if ShowWeight == 1 then\n        setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n        setNextFillColor(layer, color1.r, color1.g, color1.b, 1) \n        addText(layer,subtitlefont,Weight .. \"T\",X-5,Y+Height+10)    \n    end\n\n    if type(TableList) == \"table\" then\n        if #TableList > 3 then  \n            max = 3\n        else\n            max = #TableList\n        end\n        for i = 1,max do \n            if tonumber(TableList[i].l) ~= nil then\n                la = Labels[TableList[i].l]\n            else\n                la = TableList[i].l\n            end\n            addText(layer, font3, la .. \": \" .. math.floor(TableList[i].w) .. \" tons\" , X+16, YY)\n            YY = YY+25\n        end\n    end\n    if TargetIndex > 0 then\n        MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    end\n\nend\n\nfunction DrawCircleButton(X,Y,Size,Rotation)\n    setNextRotationDegrees(layer, Rotation)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    if Rotation == 90 then\n        addTriangle(layer, X+52, Y+55, X+52-Size, Y+55+Size*2, X+52+Size, Y+55+Size*2)\n    else\n        addTriangle(layer, X+46, Y+55, X+46-Size, Y+55+Size*2, X+46+Size, Y+55+Size*2)\n    end\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addCircle(layer, X+50, Y+70, Size*2+4)\n    setNextFillColor(layer, 0, 0, 0, 1)\n    addCircle(layer, X+50, Y+70, Size*2)\nend\n\nfunction DrawBackButton(X,Y,Width,Height,TargetIndex)\n    --addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n    --addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    --addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)  \n    --setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    --setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    --addText(layer, subtitlefont, \"SHIP INFO v\" .. version,X+Width*0.88,Y+10)\n    --setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    addText(layer,titlefont, \"Back\", X+Width*0.7,Y+Height*1.9)\n    --addText(layer,titlefont, \"main screen\", X+Width*0.25,Y+95)\n    DrawCircleButton(X,Y,15,-90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawNextButton(X,Y,Width,Height,TargetIndex)\n    --addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n    --addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    --addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)  \n    --setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    --setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    --addText(layer, subtitlefont, \"SHIP INFO v\" .. version,X+Width*0.88,Y+10)\n    --setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    addText(layer,titlefont, \"Next\", X+18,Y+Height*1.9)\n    --addText(layer,titlefont, \"main screen\", X+Width*0.25,Y+95)\n    DrawCircleButton(X+Width*0.59,Y,15,90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(layer, 1) \n    setNextStrokeColor(layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(layer, 0,0,0, 1)\n    addBoxRounded(layer,X-Width/2,Y,Width,Height,5)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1)\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    addText(layer, Font, text1, X-Width/2-20,Y+Height/2)\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    addText(layer, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(layer,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawVProgressBar(X,Y,Width,Height,Max,Current,text1,text2)    \n    setNextStrokeWidth(layer, 1) \n    setNextStrokeColor(layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(layer, 0,0,0, 1)\n    addBoxRounded(layer,X-Width/2,Y,Width,Height,5)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, textfont, text1, X,Y+Height+15)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, textfont,text2, X,Y+Height+35)\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(layer,X-Width/2+5,Y+Height-Current*Height/Max,Width-10,Height-(Height-Current*Height/Max),5)\nend\n\nfunction drawRadialGauge(X,Y,Size,Current,Max,Text,TankType)\n    --logMessage(Text .. \"--->\" .. Current .. \"/\" .. Max)\n    local a1=math.floor(100/Max*Current)..\"%\" -- percent\n    local d=math.pi/180\n    local W=math.ceil(Current/Max*100)\n    local ab=100\n    local ac,ad=Size*math.cos(0),Size*math.sin(0)\n    local ae,af=Size*math.cos(360/ab*1*d),Size*math.sin(360/ab*1*d)\n    for ag=1,ab,1 do\n        local ac,ad=X+Size*math.cos((360/ab*(ag-1)+-90)*d),Y+Size*math.sin((360/ab*(ag-1)+-90)*d)\n        local ae,af=X+Size*math.cos((360/ab*ag+-90)*d),Y+Size*math.sin((360/ab*ag+-90)*d)\n        if ag<W or ag==W then\n            setNextFillColor(E,color1.r,color1.g,color1.b,1)\n        else \n            setNextFillColor(E,0,0,0,1)\n        end\n        addTriangle(E,X,Y,ac,ad,ae,af)\n    end\n    setNextFillColor(F,0.137,0.122,0.125,1)\n    addCircle(F,X,Y,Size/1.255)\n\n    if type(TankType) == 'string' then\n\n        if string.match(TankType, \"Atmospheric\") then\n            setNextFillColor(H,71/255,144/255,179/255,1) \n        elseif string.match(TankType, \"Space\") then\n            setNextFillColor(H,1,0.1,0.1,1)\n\n        elseif string.match(TankType, \"Rocket\") then\n            setNextFillColor(H,0.1,1,0.1,1)\n\n        end\n        addBox(H,X-Size/4,Y+ry*0.02,Size/2,4) \n\n\n\n    end\n\n    setNextFillColor(H,color2.r, color2.g, color2.b,1)\n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    addText(H,subtitlefont,a1,X+(Size/15),Y+ry*0.01) -- centered percent\n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    addText(H,textfont,Text,X,Y+Size*1.6)\nend\n\n-------------------------------------------------------------\n-- BACKGROUND --\n\nlocal background = loadImage(background)\naddImage(layer, background, 0, 0, rx, ry,0.2)\n\n-- background lines\nsetDefaultStrokeColor(layer, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(layer,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(layer,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n\n\nsetDefaultStrokeColor(layer, Shape_Line, color1.r, color1.g, color1.b, 1)\nsetDefaultStrokeWidth(layer, Shape_Line, 8)\n\nDrawFrame(rx/2,33,rx-420,ry-65)\n\nsetDefaultStrokeWidth(layer, Shape_Line, 3)\n\n\n\n-------------------------------------------------------------\n-- INDEX 1 --\nif ScreenIndex == 1 then\n\n    -------------------------------------------------------------\n    -- SHIP INFO --\n\n    X = rx*0.22\n    Y = ry*0.1\n    Width = rx*0.28\n    local Height = 110\n\n    DrawSmallBox(0,rx*0.22,ry*0.1,ShipName,0,false,0,0,0)\n    addText(layer, font3, \"Fuel: \"..reformatInt(math.floor(TankTotalWeight/1000))..\" tons\", X+30,Y+52)\n    addText(layer, font3, \"Cargo: \"..reformatInt(HubTotalWeight)..\" tons\", X+30,Y+75)\n\n\n    addText(layer, font, \"Total: \"..reformatInt(math.floor(ShipMass/1000))..\" tons\", X+28,Y+105)\n\n\n    -------------------------------------------------------------\n    -- IF UNDAMAGED --\n    --DrawProgressBar(rx*0.69,Y+45,200,26,data.v,data.TotalHitPoints,\"\",math.floor(data.TotalHitPoints*100/data.v+0.5)..\"%\",font)\n    -- if #data.DamagedElements == 0 then\n    --  setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    -- addText(layer, titlefont, \"Undamaged\", rx-Width-60,Y+55)\n    -- addText(layer, font, reformatInt(math.floor(data.TotalHitPoints))..\" Hit Points\", rx-Width-60,Y+95)\n    -- end\n\n    -------------------------------------------------------------\n    -- BOXES --\n\n    --DrawSmallBox(rx*0.10,ry*0.1,\"SHIP INFO\",data.DamagedElements,data.DamagedCount,0)\n    --  DrawSmallBox(2,rx*0.55,ry*0.1,\"Damaged Elements\",data.DamagedElements,data.DamagedCount,0,0,2)\n    --  DrawSmallBox(3,rx*0.10,ry*0.38,label3,data.ContainerList,data.ContainerCount,1,data.ContainerTotalWeight,3)\n    --  DrawSmallBox(4,rx*0.55,ry*0.38,\"Fuel Tanks\",FuelData,FuelData,1,data.TankTotalWeight,4)\n    -- DrawSmallBox(5,rx*0.10,ry*0.67,\"Docked Constructs\",data.DockedList,data.DockedCount,1,data.DockedTotalWeight,5)\n    --  DrawSmallBox(6,rx*0.55,ry*0.67,\"Boarded Players\",data.PlayerList,data.PlayerCount,1,data.PlayerTotalWeight,6)\n\n    ---- new main ---- \n\n\n\n\n    -- background lines\n    setDefaultStrokeColor(F, Shape_Line, color1.r, color1.g, color1.b, 0.02)\n    MaxLines =50\n    for i=1, MaxLines do\n        addLine(F,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\n    end\n    MaxLines =70\n    for i=1, MaxLines do\n        addLine(F,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\n    end\n\n    ---------------\n    -- HUB VBARS --\n    ---------------\n\n    Y=370\n    W = 30\n    X=rx/2-(#HubData*75)-W*2.5\n    MakeButtonClickable(150+X-60,Y,#HubData*151,140,3)\n    for i = 1, #HubData do    \n        X = X+150\n        DrawVProgressBar(X,Y,W,120,HubData[i].m,HubData[i].v,HubData[i].l,math.floor(HubData[i].v*100/HubData[i].m)..\"%   (\"..HubData[i].w..\" tons)\")\n    end\n\n\n    -----------------\n    -- FUEL GAUGES --\n    -----------------\n\n    Color = {color1.r, color1.g, color1.b}\n    X = 600\n    s = 60 - #FuelData*2.7\n    ss = math.floor(#FuelData/2) -- split gauges on each side\n    Y = ry/2-#FuelData*s*0.9\n    --Y = #FuelData*4.5 -65\n    T = Y\n\n    MakeButtonClickable(865,50,100,ry-110,4)\n    MakeButtonClickable(85,50,100,ry-110,4)\n\n    for i = 1, ss do        \n        T = T + s*2.8\n        drawRadialGauge(120,T,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n    for i = ss+1, #FuelData do\n        Y = Y + s*2.8\n        drawRadialGauge(900,Y,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n\n    ----------------------\n    -- DAMAGED ELEMENTS --\n    ----------------------\n\n\n    Y = ry*0.1\n    Width = rx*0.36\n\n\n\n\n\n\n    DrawSmallBox(2,rx*0.53,ry*0.1,\"Damaged Elements\",0,BrokenCount+DamagedCount,0,0,2)\n\n\n    if tonumber(TotalHitPoints) < tonumber(TotalMaxHitPoints) then -- triangle warning\n        local Y = ry*0.18\n        local Size = 10\n        local X = rx*0.556\n        setNextFillColor(layer, 247/255, 170/255, 16/255, 1) \n        addTriangle(layer, X, Y, X-Size, Y+Size*2, X+Size, Y+Size*2)\n        addText(layer, font, \"!\", X-Size/2.85,Y+Size*2)\n    end\n\n\n    DrawProgressBar(rx*0.675,Y+45,200,26,TotalMaxHitPoints,TotalHitPoints,\"\",\"\",font)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, font, reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", rx*0.675,Y+95)\n\n\n\n\n\n\n\n\n\n\n    DrawSmallBox(0,rx*0.22,ry*0.38,\"Docked Constructs\",data.DockedList,data.DockedCount,1,reformatInt(math.floor(data.DockedTotalWeight/1000)),5)\n    DrawSmallBox(0,rx*0.53,ry*0.38,\"Boarded Players\",data.PlayerList,data.PlayerCount,1,reformatInt(math.floor(data.PlayerTotalWeight/1000)),6)\n\n\n\n\n\n--else\n   -- DrawBackButton(rx*0.05,ry*0.05,135,43,1)\n --DrawBackButton(25,0,135,43,1)\n\n\n\n--end\n\n\n\n-------------------------------------------------------------\n-- INDEX 2 -- DAMAGED ELEMENTS DETAILS\nelseif ScreenIndex == 2 then\n DrawBackButton(25,0,135,43,1)\n\n\nX = rx*0.48\n\n    Y = 50\n\n\n    DrawProgressBar(X,ry*0.13,350,50,TotalMaxHitPoints,TotalHitPoints,\"\",\"\",font)\n    \nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle)\naddText(layer, titlefont, math.floor(TotalHitPoints*100/TotalMaxHitPoints)..\"%\", X,Y+5)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n\n    \naddText(layer, font, reformatInt(math.floor(TotalHitPoints))..\"/\"..reformatInt(math.floor(TotalMaxHitPoints)), X,Y+95)\n\naddText(layer, font, reformatInt(math.floor(BrokenCount))..\" Broken Elements\", X+250,Y+45)\n    addText(layer, font, reformatInt(math.floor(DamagedCount))..\" Damaged Elements\", X+250,Y+75)\n\n    Y = 150\n    if type(DamagedElements) == 'table' then\n        for i=1, #DamagedElements do\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n\nif (i % 2 == 0) then\nX = 280\n     --it is even\n\nelse\nX = 745\n    --it is odd\nY=Y+90\nend\n\n\n            \n\n           \n    \n\n            addText(layer, font,DamagedElements[i].l, X,Y)\n            DrawProgressBar(X,Y+20,350,35,DamagedElements[i].m,DamagedElements[i].w,\"\",\"\",font)\n            --MakeButtonClickable(X-170,Y-10,370,60,0)\n\n        end\n    else\n        addText(layer, font, \"waiting data\", 500,40)\n    end\n    \n    -------------------------------------------------------------\n    -- INDEX 3 -- HUBS SCREEN\n\nelseif ScreenIndex == 3 then\n\n  --  if #HubData == 1 then\n     --   DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n      --  setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n      --  addText(layer, titlefont, HubData[1].l, rx*0.5,ry*0.17)\n      --  DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[1].m,HubData[1].v,\"\",math.floor(HubData[1].v*100/HubData[1].m)..\"%\",font3)\n      --  setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n      --  addText(layer, titlefont, HubData[1].w..\" tons\", rx*0.5,ry*0.88)\n   -- else\n\n        Width = rx*0.36\n        Y = ry*0.1\n\n        setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n        addText(layer, titlefont, #HubData..\" Hubs\", rx*0.59,Y+95)\n\n        X = rx*0.5\n        Y = ry*0.26\n        Width = 400\n        Height = 50\n\n        if #HubData < 5 then\n            Y = ry*0.46-(ry*0.05*#HubData)\n        end\n\n        for i = 1, #HubData do\n            Y = Y+80\n            DrawProgressBar(X,Y,Width,Height,HubData[i].m,HubData[i].v,HubData[i].l,\" \"..math.floor(HubData[i].v*100/HubData[i].m)..\"%\" ..\"    (\"..HubData[i].w..\" tons)\",font3)\n        end\n\n    --end\n DrawBackButton(25,0,135,43,1)\n\n\nDrawNextButton(rx-210,0,135,43,31)\n\n    -------------------------------------------------------------\n    -- INDEX 31 --\n\nelseif ScreenIndex == 31 then\n         DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[1].l, rx*0.5,ry*0.17)\n        DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[1].m,HubData[1].v,\"\",math.floor(HubData[1].v*100/HubData[1].m)..\"%\",font3)\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[1].w..\" tons\", rx*0.5,ry*0.88)\n        if #HubData > 1 then DrawNextButton(rx-210,0,135,43,32) end\n DrawBackButton(25,0,135,43,3)\n\n\n\n\n -------------------------------------------------------------\n    -- INDEX 32 --\n\nelseif ScreenIndex == 32 then\n         DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[2].l, rx*0.5,ry*0.17)\n        DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[2].m,HubData[2].v,\"\",math.floor(HubData[2].v*100/HubData[2].m)..\"%\",font3)\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[2].w..\" tons\", rx*0.5,ry*0.88)\nif #HubData > 2 then DrawNextButton(rx-210,0,135,43,33) end\n DrawBackButton(25,0,135,43,31)\n\n\n\n -------------------------------------------------------------\n    -- INDEX 33 --\n\nelseif ScreenIndex == 33 then\n         DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[3].l, rx*0.5,ry*0.17)\n        DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[3].m,HubData[3].v,\"\",math.floor(HubData[3].v*100/HubData[3].m)..\"%\",font3)\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[3].w..\" tons\", rx*0.5,ry*0.88)\nif #HubData > 3 then DrawNextButton(rx-210,0,135,43,34) end\n DrawBackButton(25,0,135,43,32)\n\n\n\n -------------------------------------------------------------\n    -- INDEX 34 --\n\nelseif ScreenIndex == 34 then\n         DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[4].l, rx*0.5,ry*0.17)\n        DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[4].m,HubData[4].v,\"\",math.floor(HubData[4].v*100/HubData[4].m)..\"%\",font3)\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        addText(layer, titlefont, HubData[4].w..\" tons\", rx*0.5,ry*0.88)\n DrawBackButton(25,0,135,43,33)\n\n\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 4 --\n\nelseif ScreenIndex == 4 then\n\n    DrawSmallBox(3,rx*0.55,ry*0.1,\"Fuel Tanks\",0,#FuelData,1,math.floor(TankTotalWeight/1000),0)\n\n    rocket = 0\n    atmo = 0\n    space = 0\n    for i=1, #FuelData do\n        if string.match(FuelData[i].t,\"Space\") then\n            space = space +1\n        elseif string.match(FuelData[i].t,\"Atmospheric\") then\n            atmo = atmo +1\n        elseif string.match(FuelData[i].t,\"Rocket\") then\n            rocket = rocket +1\n        end\n    end\n\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    if space > 0 then\n        addText(layer, titlefont, space ..\" Space Fuel Tanks\", rx*0.59,ry*0.1+50)\n    end\n    if atmo > 0 then\n        addText(layer, titlefont, atmo ..\" Atmospheric Fuel Tanks\", rx*0.59,ry*0.1+90)\n    end\n    if rocket > 0 then\n        addText(layer, titlefont, rocket ..\" Rocket Fuel Tanks\", rx*0.59,ry*0.1+120)\n    end\n\n    if #FuelData > 8 then -- two rows\n        X = rx*0.35\n        Width = 120\n        Height = 25\n        Y = ry*0.46-(ry*0.05*3)\n        O = 50-#FuelData\n\n\n        for i = 1, math.floor(#FuelData/2) do\n            Y = Y+O\n            DrawProgressBar(X*0.95,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",textfont)\n        end\n        Y = ry*0.46-(ry*0.05*3)\n        for i = math.floor(#FuelData-#FuelData/2)+1, #FuelData do\n            Y = Y+O\n            DrawProgressBar(X*2.3,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",textfont)\n        end\n\n    else\n        X = rx*0.5\n        Width = 400\n        Height = 50-#FuelData*3\n        Y = ry*0.46-(ry*0.05*3)\n        O = 80-#FuelData*5\n        for i = 1, #FuelData do    \n            Y = Y+O\n            DrawProgressBar(X,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",font3)\n        end\n    end\n\nDrawBackButton(25,0,135,43,1)\n\n    -------------------------------------------------------------\n    -- INDEX 5 --\n\nelseif ScreenIndex == 5 then\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 6 --\n\nelseif ScreenIndex == 6 then\n\n\n\n\n\nend\n\n-------------------------------------------------------------\n-- BOTTOM SCREEN INFOS --\n\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle)\naddText(layer, textfont, \"SHIP INFO v\" .. version, rx/2, ry*0.975)\n\n\nif debug == true then\n    setNextFillColor(layer, 1, 0.1, 0.1, 1)\n    addText(layer, textfont, \"Index: \"..ScreenIndex, rx/2+235,ry*0.993)\n    setNextFillColor(layer, 1, 0.1, 0.1, 1) \n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle) \n    addText(layer, textfont, \"render cost: \"..math.floor((getRenderCost()*100)/getRenderCostMax())..\"%\", rx/2.6, ry*0.984)\n    setNextFillColor(layer, 1, 0.1, 0.1, 1) \n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle) \n    addText(layer, textfont, \"input: \"..#getInput()..\"/1024\", rx/1.6, ry*0.984)\nend\n\n\nrequestAnimationFrame(1) \n\n\n        ]]\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"2"},{"code":"function GetHubData(Hubs,hubs)\n    local z = 0\n    local data = 'local HubData = {}'\n    for i = 1, #Hubs do\n        w = math.floor(hubs[i].getItemsMass()/1000)\n        data = data..[[            \n        HubData[]]..i..[[]= {\n        l=\"]]..Hubs[i].l..[[\",\n        m= ]]..Hubs[i].m..[[,\n        v= ]]..math.floor(hubs[i].getItemsVolume())..[[,\n        w= ]]..w..[[}]]\n        z = z + w\n    end    \n    data = data..[[ local HubTotalWeight = ]]..z\n    return data\nend\n\nfunction GetTankData(tanks)\n    local z = 0   \n    local data = 'local FuelData = {}'\n    for i = 1, #tanks do\n        local ElementMass = core.getElementMassById(tanks[i].id)\n        if string.match(tanks[i].t, \"Atmospheric\") then\n            f = 4\n        elseif string.match(tanks[i].t, \"Space\") then\n            f = 6\n        elseif string.match(tanks[i].t, \"Rocket\") then\n            f = 0.8\n        end        \n        data = data..[[            \n        FuelData[]]..i..[[]= {\n        l=\"]]..tanks[i].l..[[\",\n        m= ]].. tanks[i].m ..[[,\n        v= ]]..math.floor((ElementMass - tanks[i].u)/f*(1+Container_Optimization/10+Fuel_Tank_Optimization/10))..[[,\n        t= \"]]..tanks[i].t..[[\",\n        w= ]]..math.floor((ElementMass - tanks[i].u)/1000)..[[}]]\n        z = z + ElementMass - tanks[i].u\n    end\n    data = data..[[local TankTotalWeight = ]]..z\n    return data\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"}],"methods":[],"events":[]}
