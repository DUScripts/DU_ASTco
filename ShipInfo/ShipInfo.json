{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"------------------------------------------------------------------------------\n------ Ship Info by Krengus ------\n\nversion = 0.1\n\n------------------------------------------------------------------------------\n-- USER VARIABLES --\n\ncolor1 = {r=0.06,g=0.76,b=1} \ncolor2 = {r=1,g=204/255,b=153/255}\n\n--background = \"assets.prod.novaquark.com/61625/2b9422dc-dd18-4b00-b16b-d3cb3f2eff33.jpg\"\n--background = \"assets.prod.novaquark.com/61625/5e69e935-94b8-46a5-bef2-2726ccd0687c.jpg\" \nbackground = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\nHub1_Max_Volume = 487500 --export\nHub2_Max_Volume = 12000 --export\nHub3_Max_Volume = 487500 --export\nHub4_Max_Volume = 12000 --export\n\nRefresh_Rate = 3 --export\nShow_Unit = true --export\n\nContainer_Optimization = 0 --export\nFuel_Tank_Optimization = 0 --export\n\n------------------------------------------------------------------------------\n-- SCRIPT START --\n\n\n\n\n\n\nscreens =  {}\nhubs = {}\nLabels = {}\n\nfor slot,element in pairs(unit)do \n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getElementClass then\n            if element.getElementClass()==\"ScreenUnit\"then \n                screens[#screens+1]=element\n            elseif element.getElementClass()==\"CoreUnitDynamic\"then \n                core=element\n            elseif element.getElementClass()==\"ItemContainer\"then \n                hubs[#hubs+1]=element\n                hubs[#hubs].slot=slot\n               -- system.print(hubs[#hubs].id)\n                --system.print(slot)\n            end \n        end \n    end \nend\n\nif not next(screens) then\n    system.print(\"No screen found\")\n    unit.exit()\nend\n\nif core == nil then\n    system.print(\"No core found\")\n    unit.exit()\nend\n\nif not next(hubs) then\n    system.print(\"No hub found\")\n    unit.exit()\nend\n\n\n\n\n\n\n  table.sort(hubs, function(a,b) return a.slot < b.slot end) -- sorting by slot\n\n\n\nfunction FormatTable(arr)\n    table.sort(arr, function(a,b) return a.w > b.w end) -- sorting table, heaviest first\n    local a = {}\n    for i = 1, 3 do \n        if i < #arr+1 then -- limiting table to 3 lines\n            table.insert(a,{l = arr[i].l,w = math.floor(arr[i].w)})\n        end\n    end\n    return a\nend\n\nfunction UpdateData()\n    ------------------------------------------------------------------------------\n    -- LINKED HUBS --\n    \n    Hubs = {}\n    if Hub1_Max_Volume > 0 and #hubs > 0 then\n        table.insert(Labels, {id = hubs[1].getId(),name = core.getElementNameById(hubs[1].getId())}) \n        table.insert(Hubs, {\n                l = hubs[1].getId(),\n                m = Hub1_Max_Volume,\n                v = math.floor(hubs[1].getItemsVolume()),\n                w = math.floor(hubs[1].getItemsMass()/1000)\n            })\n    end\n\n    if Hub2_Max_Volume > 0 and #hubs > 1 then\n        table.insert(Labels, {id = hubs[2].getId(),name = core.getElementNameById(hubs[2].getId())}) \n        table.insert(Hubs, {\n                l = hubs[2].getId(),\n                m = Hub2_Max_Volume,\n                v = math.floor(hubs[2].getItemsVolume()),\n                w = math.floor(hubs[2].getItemsMass()/1000)\n            })\n    end\n\n    if Hub3_Max_Volume > 0 and #hubs > 2 then\n        table.insert(Labels, {id = hubs[3].getId(),name = core.getElementNameById(hubs[3].getId())}) \n        table.insert(Hubs, {\n                l = hubs[3].getId(),\n                m = Hub3_Max_Volume,\n                v = math.floor(hubs[3].getItemsVolume()),\n                w = math.floor(hubs[3].getItemsMass()/1000)\n            })\n    end\n\n    if Hub4_Max_Volume > 0 and #hubs > 3 then\n        table.insert(Labels, {id = hubs[4].getId(),name = core.getElementNameById(hubs[4].getId())}) \n        table.insert(Hubs, {\n                l = hubs[4].getId(),\n                m = Hub4_Max_Volume,\n                v = math.floor(hubs[4].getItemsVolume()),\n                w = math.floor(hubs[4].getItemsMass()/1000)\n            })\n    end\n\n    ------------------------------------------------------------------------------\n    -- SHIP ELEMENTS --\n\n   -- local ContainerList = {}\n  --  local ContainerTotalWeight = 0\n    local TankList = {}\n    local TankTotalWeight = 0\n    local DamagedElements = {}\n    local TotalHitPoints = 0\n    local TotalMaxHitPoints = 0\n    local elements = core.getElementIdList()\n    \n     MaxHandlingHP = 1.2 -- multiplier for maxed HP handling talents\n        -- base hitpoints, used to find out tank size and weight        \n       -- ContainerXS = 123   \n     --   ContainerS = 998                \n     --   ContainerM = 7996        \n     --   ContainerL = 17314\n     --   ContainerXL = 34632\n      --  ContainerEX = 69266\n        AtmoTankXS = 49\n        AtmoTankS = 162\n        AtmoTankM = 1314\n        AtmoTankL = 10460\n        SpaceTankXS = 49\n        SpaceTankS = 186\n        SpaceTankM = 1495\n        SpaceTankL = 15932\n        RocketTankXS = 365\n        RocketTankS = 735\n        RocketTankM = 6230\n        RocketTankL = 68823\n    \n    --system.print(type(SpaceTankXS))\n\n    for i = 1, #elements do\n\n        local HitPoints = core.getElementHitPointsById(elements[i])\n        local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n        local ElementType = core.getElementTypeById(elements[i])\n        local ElementMass = core.getElementMassById(elements[i])\n        local ElementName = core.getElementNameById(elements[i])\n\n       \n\n        \n\n     --   if string.match(ElementType, \"Container\") then\n          --  if MaxHitPoints > ContainerM and MaxHitPoints < ContainerM*MaxHandlingHP then -- container M\n           --     ContainerWeight = 7421.35\n         --   elseif MaxHitPoints > ContainerXS and MaxHitPoints < ContainerXS*MaxHandlingHP then -- container XS\n         --       ContainerWeight = 229.09\n         --   elseif MaxHitPoints > ContainerS and MaxHitPoints < ContainerS*MaxHandlingHP then -- container S\n         --       ContainerWeight = 1281.31\n         --   elseif MaxHitPoints > ContainerL and MaxHitPoints < ContainerL*MaxHandlingHP then -- container L\n          --      ContainerWeight = 14842.7\n         --   elseif MaxHitPoints > ContainerXL and MaxHitPoints < ContainerXL*MaxHandlingHP then -- container XL\n          --      ContainerWeight = 44206\n         --   elseif MaxHitPoints > ContainerEX and MaxHitPoints < ContainerEX*MaxHandlingHP then -- Expanded container XL\n         --       ContainerWeight = 88413\n         --   elseif ElementType == \"Container Hub\" then -- container Hub\n          --      ContainerWeight = 55.8\n         --   else\n         --       system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints..type(MaxHitPoints))\n        --    end\n       --     ContainerTotalWeight = ContainerTotalWeight + ElementMass - ContainerWeight\n        --    table.insert(Labels, {id = elements[i],name = ElementName}) \n        --    table.insert(ContainerList, {\n        --            l = elements[i],\n        --            w = math.floor(ElementMass - ContainerWeight)/1000})\n      --  end\n\n\n        if string.match(ElementType, \"Atmospheric Fuel Tank\") then\n            if MaxHitPoints > AtmoTankXS and MaxHitPoints < AtmoTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > AtmoTankS and MaxHitPoints < AtmoTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > AtmoTankM and MaxHitPoints < AtmoTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > AtmoTankL and MaxHitPoints < AtmoTankL*MaxHandlingHP then\n                TankWeight = 5481.27            \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            TankTotalWeight = TankTotalWeight + ElementMass - TankWeight\n\n            -- 4 -- natron\n            -- 6 -- xergon\n            -- 0.8 -- rocket\n\n            --cPercent = math.floor(100/TankMaxVolume*(ElementMass-TankWeight)/4)\n            table.insert(Labels, {id = elements[i],name = ElementName})\n            table.insert(TankList, {\n                    l = elements[i],\n                    m = TankMaxVolume*(1+Container_Optimization/10+Fuel_Tank_Optimization/10),\n                    v = math.floor((ElementMass - TankWeight)/4),\n                    w = math.floor((ElementMass - TankWeight)/1000)})\n        end\n\n\n        if string.match(ElementType, \"Space Fuel Tank\") then\n            if MaxHitPoints > SpaceTankXS and MaxHitPoints < SpaceTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > SpaceTankS and MaxHitPoints < SpaceTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > SpaceTankM and MaxHitPoints < SpaceTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > SpaceTankL and MaxHitPoints < SpaceTankL*MaxHandlingHP then\n                TankWeight = 5481.27  \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            TankTotalWeight = TankTotalWeight + ElementMass - TankWeight\n            table.insert(Labels, {id = elements[i],name = ElementName})             \n            table.insert(TankList, {\n                    l = elements[i],\n                    m = TankMaxVolume*(1+Container_Optimization/10+Fuel_Tank_Optimization/10),\n                    v = math.floor((ElementMass - TankWeight)/6),\n                    w = math.floor((ElementMass - TankWeight)/1000)})\n        end\n\n\n        if string.match(ElementType, \"Rocket Fuel Tank\") then\n            if MaxHitPoints > RocketTankXS and MaxHitPoints < RocketTankXS*MaxHandlingHP then\n                TankWeight = 173.42\n                TankMaxVolume = 400\n            elseif MaxHitPoints > RocketTankS and MaxHitPoints < RocketTankS*MaxHandlingHP then\n                TankWeight = 886.72\n                TankMaxVolume = 800\n            elseif MaxHitPoints > RocketTankM and MaxHitPoints < RocketTankM*MaxHandlingHP then\n                TankWeight = 4724.43\n                TankMaxVolume = 6400\n            elseif MaxHitPoints > RocketTankL and MaxHitPoints < RocketTankL*MaxHandlingHP then\n                TankWeight = 25741.76   \n                TankMaxVolume = 50000\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            TankTotalWeight = TankTotalWeight + ElementMass - TankWeight\n            table.insert(Labels, {id = elements[i],name = ElementName}) \n\n            table.insert(TankList, {\n                    l = elements[i],\n                    m = TankMaxVolume*(1+Container_Optimization/10+Fuel_Tank_Optimization/10),\n                    v = math.floor((ElementMass - TankWeight)/0.8),\n                    w = math.floor((ElementMass - TankWeight)/1000)})\n        end\n\n\n        TotalHitPoints = TotalHitPoints + HitPoints\n        TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n\n        if HitPoints ~= MaxHitPoints then\n            table.insert(Labels, {id = elements[i],name = ElementName}) \n            table.insert(DamagedElements, {\n                    l = elements[i],\n                    w = HitPoints})\n        end\n\n    end\n\n    ------------------------------------------------------------------------------\n    -- CONSTRUCTS --\n\n    local DockedList = {}\n    local DockedTotalWeight = 0\n\n    for key, construct in pairs(core.getDockedConstructs()) do\n        local Mass = core.getDockedConstructMass(construct)\n        DockedTotalWeight = DockedTotalWeight + Mass\n        table.insert(DockedList, {\n                l = \"Construct [\"..construct..\"]\",\n                w = Mass})\n    end\n\n\n    ------------------------------------------------------------------------------\n    -- PLAYERS --\n\n    local PlayerList = {}\n    local PlayerTotalWeight = 0\n    for key, Player in pairs(core.getPlayersOnBoard()) do\n        local Mass = core.getBoardedPlayerMass(Player)\n        PlayerTotalWeight = PlayerTotalWeight + Mass\n        table.insert(PlayerList, {\n                l = system.getPlayerName(Player),\n                w = Mass})\n    end\n\n\n    ------------------------------------------------------------------------------\n    -- SCREEN INPUT (limited to 1024char) --\n\n    table.sort(TankList, function(a,b) return a.w > b.w end)\n    \n\n\n\nlocal json = require(\"dkjson\")\n    for key, screen in pairs(screens) do -- updating screens input\n        data = {\n            c = core.getConstructName(),\n            d = math.floor(core.getConstructMass()),\n            h = TankList,\n            j = math.floor(TankTotalWeight),\n            k = FormatTable(DockedList),\n            l = #DockedList,\n            m = math.floor(DockedTotalWeight),\n            n = FormatTable(PlayerList),\n            o = #PlayerList,\n            p = math.floor(PlayerTotalWeight),\n            q = FormatTable(DamagedElements),\n            r = #DamagedElements,\n            s = math.floor(TotalHitPoints),\n            t = screen.getScriptOutput(),\n            u = Hubs,\n            v = TotalMaxHitPoints\n        } \n        screen.setScriptInput(json.encode(data))\n    end\nend\n\n\nUpdateData()\n\n\nstr=\"local Labels = {}\\n\"\nstr = str .. 'local color1={}\\n'\nstr = str .. 'local color2={}\\n'\nstr = str .. 'color1.r = '..color1.r..'\\n'\nstr = str .. 'color1.g = '..color1.g..'\\n'\nstr = str .. 'color1.b = '..color1.b..'\\n'\nstr = str .. 'color2.r = '..color2.r..'\\n'\nstr = str .. 'color2.g = '..color2.g..'\\n'\nstr = str .. 'color2.b = '..color2.b..'\\n'\nstr = str .. 'local background = \"'..background..'\"\\n'\nstr = str .. 'local version = '..version..'\\n'\n\n\nfor number,item in pairs(Labels) do\n    if string.match(item.name,\"Atmospheric Fuel Tank\") then\n        a = string.gsub(item.name,\"Atmospheric Fuel Tank\",\"Atmo Tank\")\n    elseif string.match(item.name,\"Space Fuel Tank\") then\n        a = string.gsub(item.name,\"Space Fuel Tank\",\"Space Tank\")\n    elseif string.match(item.name,\"Rocket Fuel Tank\") then\n        a = string.gsub(item.name,\"Rocket Fuel Tank\",\"Rocket Tank\")\n    else\n        a = item.name\n    end    \n    str = str .. 'Labels['..item.id..']=\"'..a..'\"\\n'\nend\n\nfor key, screen in pairs(screens) do -- updating screens with initial content\n    screen.setRenderScript(str ..'\\n'.. screenContent)\nend\n\nunit.setTimer(\"upd\",Refresh_Rate)\nif Show_Unit == false then unit.hide() end\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"UpdateData()\n","filter":{"args":[{"value":"upd"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"screenContent = [[\n\nlocal label3 = \"Storage Containers\"\n\nlocal json = require(\"dkjson\")\nlocal data = json.decode(getInput())\n\ndata.ShipName = data.c \ndata.ShipMass = data.d \ndata.TankList = data.h \ndata.TankCount = #data.h\ndata.TankTotalWeight = data.j \ndata.DockedList = data.k \ndata.DockedCount = data.l \ndata.DockedTotalWeight = data.m \ndata.PlayerList = data.n \ndata.PlayerCount = data.o \ndata.PlayerTotalWeight = data.p \ndata.DamagedElements = data.q \ndata.DamagedCount = data.r \ndata.TotalHitPoints = data.s \ndata.ScreenIndex = data.t \ndata.Hubs = data.u \n\nlocal layer = createLayer()    \n\nlocal E=createLayer()\nlocal F=createLayer()\nlocal G=createLayer()\nlocal H=createLayer()\nlocal rx, ry = getResolution() \nlocal cx, cy = getCursor()\nlocal subtitlefont = loadFont(\"FiraMono-Bold\", 18) \nlocal textfont = loadFont(\"RobotoCondensed\", 16)\nlocal titlefont = loadFont(\"Play-Bold\", 30)\nlocal font3 = loadFont(\"RobotoCondensed\", 20) \nlocal font = loadFont(\"Play-Bold\", 24) \n\nScreenIndex = ScreenIndex or tonumber(data.ScreenIndex) or 1\n\n-------------------------------------------------------------\n-- BACKGROUND --\n\nbackground = loadImage(background)\naddImage(layer, background, 0, 0, rx, ry,0.2)\n\n-- background lines\nsetDefaultStrokeColor(layer, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(layer,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(layer,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\nsetDefaultStrokeColor(layer, Shape_Line, color1.r, color1.g, color1.b, 1)\nsetDefaultStrokeWidth(layer, Shape_Line, 8)\n\n-- background frame\nX = rx/10\nY = 25\naddLine(layer, X*2+5, Y, rx-X*2,Y)-- top line\naddLine(layer,X*2-15+5,Y-10 , X*2+5, Y)-- top left curve\naddLine(layer,rx*0.04+5, Y-10 , X*2-15+5,Y-10)-- top left line\naddLine(layer,rx-X*2, Y , rx-X*2+15,Y-10)-- top right curve\naddLine(layer,rx-X*2+15,Y-10 , rx*0.96-15,Y-10)-- top right line\naddLine(layer,rx*0.96-15,Y-10 , rx*0.96+20,Y+10)-- top right corner\naddLine(layer,rx*0.96+20,Y+10 ,rx*0.96+20,ry-Y-10)-- right line\naddLine(layer,rx*0.96+20,ry-Y-10 , rx*0.96-15,ry-Y+10)-- bottom right corner\naddLine(layer,rx*0.04-25,ry-Y-10 , rx*0.04+5, ry-Y+10)-- bottom left corner\naddLine(layer,rx*0.04-25,Y+10 , rx*0.04-25,ry-Y-10)-- left line\naddLine(layer,rx*0.04-25,Y+10 , rx*0.04+5, Y-10)-- top left corner\naddLine(layer, X*2+5, ry-Y, rx-X*2,ry-Y)-- bottom line\naddLine(layer,X*2-15+5,ry-Y+10 ,X*2+5, ry-Y )-- bottom left curve\naddLine(layer,rx-X*2,ry-Y ,rx-X*2+15, ry-Y+10 )-- bottom right curve\naddLine(layer,rx-X*2+15, ry-Y+10 , rx*0.96-15,ry-Y+10)-- bottom right line\naddLine(layer,rx*0.04+5, ry-Y+10 , X*2-15+5,ry-Y+10)-- bottom left line\n\nsetDefaultStrokeWidth(layer, Shape_Line, 3)\n\n-------------------------------------------------------------\n-- FUNCTIONS --\n\nfunction reformatInt(i)\n    return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    if cx > X and cx < X+Width and cy > Y and cy < Y+Height then        \n        setNextShadow(layer, 10, color2.r, color2.g, color2.b, 0.5)\n        setNextStrokeWidth(layer,3)\n        setNextStrokeColor(layer, color2.r, color2.g, color2.b, 1)\n        setNextFillColor(layer,color2.r, color2.g, color2.b,0)\n        addBoxRounded(layer,X-30,Y-15,Width+30,Height+40,5)\n        -- setNextFillColor(layer,0,0,0,1)\n        --  addBoxRounded(layer,X+2-30,Y+2-15,Width-4+30,Height-4+40,5)\n        if getCursorReleased() then\n            --logMessage(\"button clicked on screen \"..screenID)\n            ScreenIndex = TargetIndex\n            setOutput(TargetIndex)\n            --DrawBackButton(rx*0.10,ry*0.1,rx*0.36,120,1)\n\n        end\n    end \nend\n\nfunction DrawSmallBox(Index,X,Y,Title,TableList,Count,ShowWeight,Weight,TargetIndex)\n    local Width = rx*0.28\n    local Height = 110\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \nif Count == 0 then\n    Count = \"\"\nelse\nCount = \" (\" .. Count .. \")\"\nend\n    addText(layer,subtitlefont,Title..Count,X+Width*0.88,Y+10)\n    addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)    \n    local YY = Y+52\n    totalweight = 0\n\n    if ShowWeight == 1 then\n        setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n        setNextFillColor(layer, color1.r, color1.g, color1.b, 1) \n        addText(layer,subtitlefont,Weight .. \"T\",X-5,Y+Height+10)    \n    end\n\n    if type(TableList) == \"table\" then\n\nif #TableList > 3 then  \nmax = 3\nelse\nmax = #TableList\nend\n        for i = 1,max do \nif tonumber(TableList[i].l) ~= nil then\nla = Labels[TableList[i].l]\n    else\nla = TableList[i].l\n    end\n\n            addText(layer, textfont, la .. \": \" .. math.floor(TableList[i].w) .. \" tons\" , X+16, YY)\n            --totalweight = totalweight + TableList[i].weight\n            YY = YY+25\n        end\n\n       -- if Count > 3 and ScreenIndex == 1 then\n            -- setNextStrokeWidth(layer,2)\n            -- setNextStrokeColor(layer, color1.r, color1.g, color1.b, 1)\n--DrawCircleButton(X+Width-90,Y+Height-80,8,90)\n\n\n           -- setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n          --  addCircle(layer, X+Width-40, Y+Height-10, 16)\n          --  setNextFillColor(layer, 0, 0, 0, 1)\n          --  addCircle(layer, X+Width-40, Y+Height-10, 12)\n          --  setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n          --  setNextTextAlign(layer, AlignH_Center, AlignV_Middle)    \n         --   addText(layer,titlefont,\"+\",X+Width-40,Y+Height-10)   \n       -- end\n\n    end\n    if TargetIndex > 0 then\n        MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    end\n\nend\n\nfunction DrawCircleButton(X,Y,Size,Rotation)\n    setNextRotationDegrees(layer, Rotation)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    if Rotation == 90 then\n        addTriangle(layer, X+52, Y+62, X+52-Size, Y+62+Size*2, X+52+Size, Y+62+Size*2)\n\n\n    else\n    addTriangle(layer, X+47, Y+60, X+47-Size, Y+60+Size*2, X+47+Size, Y+60+Size*2)\nend\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addCircle(layer, X+50, Y+70, Size*2+4)\n    setNextFillColor(layer, 0, 0, 0, 1)\n    addCircle(layer, X+50, Y+70, Size*2)\nend\n\nfunction DrawBackButton(X,Y,Width,Height,TargetIndex)\n    addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)  \n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    addText(layer, subtitlefont, \"SHIP INFO v\" .. version,X+Width*0.88,Y+10)\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    addText(layer,titlefont, \"Back to\", X+Width*0.25,Y+55)\n    addText(layer,titlefont, \"main screen\", X+Width*0.25,Y+95)\n\n\nDrawCircleButton(X,Y,10,-90)\n    MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n\n    --DrawSmallBox(0,rx*0.55,ry*0.1,\"\",0,data.ContainerCount,1,data.ContainerTotalWeight,0)\n\nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n--logMessage(text1)\n    setNextStrokeWidth(layer, 1) \n    setNextStrokeColor(layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(layer, 0,0,0, 1)\n    addBoxRounded(layer,X-Width/2,Y,Width,Height,5)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1)\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n   -- percent = math.floor(Current*100/Max)\n    addText(layer, Font, text1, X-Width/2-20,Y+Height/2)\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n    addText(layer, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(layer,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawVProgressBar(X,Y,Width,Height,Max,Current,text1,text2)    \n    setNextStrokeWidth(layer, 1) \n    setNextStrokeColor(layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(layer, 0,0,0, 1)\n    addBoxRounded(layer,X-Width/2,Y,Width,Height,5)\n    setNextFillColor(layer, color2.r, color2.g, color2.b, 1)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, textfont, text1, X,Y+Height+15)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    addText(layer, textfont,text2, X,Y+Height+35)\n    setNextFillColor(layer, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(layer,X-Width/2+5,Y+Height-Current*Height/Max,Width-10,Height-(Height-Current*Height/Max),5)\n       -- setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n\n\n  --  addText(layer,textfont,\"+\",X-Width/2+5,Y+Height-Current*Height/Max,Width-10)\nend\n\n\n\n\n\nfunction drawRadialGauge(X,Y,Size,Current,Max,Text,Color,TankColor)\n        local a1=math.floor(Current*100/Max)..\"%\" -- percent\n        local d=math.pi/180\n        local W=math.ceil(Current/Max*100)\n        local ab=100\n        local ac,ad=Size*math.cos(0),Size*math.sin(0)\n        local ae,af=Size*math.cos(360/ab*1*d),Size*math.sin(360/ab*1*d)\n        for ag=1,ab,1 do\n            local ac,ad=X+Size*math.cos((360/ab*(ag-1)+-90)*d),Y+Size*math.sin((360/ab*(ag-1)+-90)*d)\n            local ae,af=X+Size*math.cos((360/ab*ag+-90)*d),Y+Size*math.sin((360/ab*ag+-90)*d)\n            if ag<W or ag==W then\n                setNextFillColor(E,Color[1],Color[2],Color[3],1)\n            else \n                setNextFillColor(E,0,0,0,1)\n            end\n            addTriangle(E,X,Y,ac,ad,ae,af)\n        end\n        setNextFillColor(F,0.137,0.122,0.125,1)\n        addCircle(F,X,Y,Size/1.255)\n        setNextFillColor(H,color2.r, color2.g, color2.b,1)\n        setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n        addText(H,subtitlefont,a1,X+(Size/16),Y+ry*0.01) -- centered percent\n        setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n        addText(H,textfont,Text,X,Y+Size*1.6)\n    end\n\n-------------------------------------------------------------\n-- INDEX 1 --\nif ScreenIndex == 1 then\n\n    -------------------------------------------------------------\n    -- SHIP INFO --\n\n    X = rx*0.22\n    Y = ry*0.1\n    Width = rx*0.28\n    local Height = 110\n\ninfo = {}\n\n\ntable.insert(info, {\n                l = \"Cargo\",\n                w = 150})\n\ntable.insert(info, {\n                l = \"Fuel\",\n                w = 150})\n\n    DrawSmallBox(0,rx*0.22,ry*0.1,data.ShipName,info,0,1,reformatInt(math.floor(data.ShipMass/1000)),0)\n\n\n\n\n   -- addLine(layer, X+5, Y+28, X+Width*0.91, Y+28)\n  --  addLine(layer, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n  --  addLine(layer, X+5, Y+28, X+5, Y+Height*0.91)  \n  --  setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n  --  setNextFillColor(layer, color2.r, color2.g, color2.b, 1) \n    --addText(layer, subtitlefont, \"SHIP INFO v\" .. version,X+Width*0.88,Y+10)\n    --setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n   -- addText(layer, titlefont, data.ShipName, X+Width*0.1,Y+55)\n    \n  --  addText(layer, font, \"Total Weight: \"..reformatInt(math.floor(data.ShipMass/1000))..\" tons\", X+Width*0.1,Y+95)\n\n    -------------------------------------------------------------\n    -- IF UNDAMAGED --\n--DrawProgressBar(rx*0.69,Y+45,200,26,data.v,data.TotalHitPoints,\"\",math.floor(data.TotalHitPoints*100/data.v+0.5)..\"%\",font)\n   -- if #data.DamagedElements == 0 then\n      --  setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n       -- addText(layer, titlefont, \"Undamaged\", rx-Width-60,Y+55)\n       -- addText(layer, font, reformatInt(math.floor(data.TotalHitPoints))..\" Hit Points\", rx-Width-60,Y+95)\n   -- end\n\n    -------------------------------------------------------------\n    -- BOXES --\n\n    --DrawSmallBox(rx*0.10,ry*0.1,\"SHIP INFO\",data.DamagedElements,data.DamagedCount,0)\n  --  DrawSmallBox(2,rx*0.55,ry*0.1,\"Damaged Elements\",data.DamagedElements,data.DamagedCount,0,0,2)\n  --  DrawSmallBox(3,rx*0.10,ry*0.38,label3,data.ContainerList,data.ContainerCount,1,data.ContainerTotalWeight,3)\n  --  DrawSmallBox(4,rx*0.55,ry*0.38,\"Fuel Tanks\",data.TankList,data.TankCount,1,data.TankTotalWeight,4)\n   -- DrawSmallBox(5,rx*0.10,ry*0.67,\"Docked Constructs\",data.DockedList,data.DockedCount,1,data.DockedTotalWeight,5)\n  --  DrawSmallBox(6,rx*0.55,ry*0.67,\"Boarded Players\",data.PlayerList,data.PlayerCount,1,data.PlayerTotalWeight,6)\n\n---- new main ---- \n\n\n\n\n-- background lines\nsetDefaultStrokeColor(F, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(F,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(F,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n---------------\n-- HUB VBARS --\n---------------\n\nY=370\nW = 30\nX=rx/2-(#data.Hubs*75)-W*2.5\nMakeButtonClickable(150+X-60,Y,#data.Hubs*151,140,3)\nfor i = 1, #data.Hubs do    \n        X = X+150\n        DrawVProgressBar(X,Y,W,120,data.Hubs[i].m,data.Hubs[i].v,Labels[data.Hubs[i].l],math.floor(data.Hubs[i].v*100/data.Hubs[i].m)..\"%   (\"..data.Hubs[i].w..\" tons)\")\nend\n\n\n-----------------\n-- FUEL GAUGES --\n-----------------\n\nColor = {color1.r, color1.g, color1.b}\nX = 600\ns = 60 - #data.TankList*2.7\nss = math.floor(#data.TankList/2) -- split gauges on each side\nY = #data.TankList*4.5 -65\nT = Y\n    for i = 1, ss do        \n        T = T + s*2.8\n        drawRadialGauge(900,T,s,data.TankList[i].v,data.TankList[i].m,Labels[data.TankList[i].l],Color)\n    end\n    for i = ss+1, #data.TankList do\n        Y = Y + s*2.8\n        drawRadialGauge(120,Y,s,data.TankList[i].v,data.TankList[i].m,Labels[data.TankList[i].l],Color)\n    end\n\n----------------------\n-- DAMAGED ELEMENTS --\n----------------------\n\n\n    Y = ry*0.1\n    Width = rx*0.36\n\n\n    DrawSmallBox(2,rx*0.53,ry*0.1,\"Damaged Elements\",data.DamagedElements,data.DamagedCount,0,0,2)\nDrawProgressBar(rx*0.665,Y+45,200,26,data.v,data.TotalHitPoints,\"\",\"\",font)\n        setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n        addText(layer, font, reformatInt(math.floor(data.TotalHitPoints))..\" Hit Points\", rx-Width-80,Y+95)\n\n\n\n\n\n\nDrawSmallBox(0,rx*0.22,ry*0.38,\"Docked Constructs\",data.DockedList,data.DockedCount,1,reformatInt(math.floor(data.DockedTotalWeight/1000)),5)\n    DrawSmallBox(0,rx*0.53,ry*0.38,\"Boarded Players\",data.PlayerList,data.PlayerCount,1,reformatInt(math.floor(data.PlayerTotalWeight/1000)),6)\n\n\n\n\n\n\n\n\n\n\n\nelse\n    DrawBackButton(rx*0.10,ry*0.1,rx*0.36,120,1)\n\n\n\n\nend\n\n\n\n-------------------------------------------------------------\n-- INDEX 2 --\n\nif ScreenIndex == 2 then\n    --DrawBackButton(rx*0.10,ry*0.1,rx*0.36,120,1)\n    --addText(layer, titlefont, ScreenIndex, rx/2,ry/2)\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 3 --\n\nelseif ScreenIndex == 3 then\n\n\n    Width = rx*0.36\n    Y = ry*0.1\n\n --   DrawSmallBox(3,rx*0.55,ry*0.1,label3,0,data.ContainerCount,1,data.ContainerTotalWeight,0)\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n  --  addText(layer, titlefont, data.ContainerCount - #data.Hubs..\" Containers\", rx*0.59,Y+55)\n    addText(layer, titlefont, #data.Hubs..\" Hubs\", rx*0.59,Y+95)\n\n    X = rx*0.5\n    Y = ry*0.26\n    Width = 400\n    Height = 50\n    \n    if #data.Hubs < 5 then\n        Y = ry*0.46-(ry*0.05*#data.Hubs)\n    end\n\n    for i = 1, #data.Hubs do\n        Y = Y+80\n        DrawProgressBar(X,Y,Width,Height,data.Hubs[i].m,data.Hubs[i].v,Labels[data.Hubs[i].l],\" \"..math.floor(data.Hubs[i].v*100/data.Hubs[i].m)..\"%\" ..\"    (\"..data.Hubs[i].w..\" tons)\",font3)\n    end\n\n\n    -------------------------------------------------------------\n    -- INDEX 4 --\n\nelseif ScreenIndex == 4 then\n    \nDrawSmallBox(3,rx*0.55,ry*0.1,\"Fuel Tanks\",0,data.TankCount,1,data.TankTotalWeight,0)\n--setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n\nrocket = 0\natmo = 0\nspace = 0\nfor id,label in pairs(Labels) do\nif string.match(label,\"Space\") then\nspace = space +1\nelseif string.match(label,\"Atmospheric\") then\natmo = atmo +1\nelseif string.match(label,\"Rocket\") then\nrocket = rocket +1\nend\nend\n\n setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\nif space > 0 then\n    addText(layer, titlefont, space ..\" Space Fuel Tanks\", rx*0.59,ry*0.1+50)\nend\nif atmo > 0 then\n    addText(layer, titlefont, atmo ..\" Atmospheric Fuel Tanks\", rx*0.59,ry*0.1+90)\nend\nif rocket > 0 then\n    addText(layer, titlefont, rocket ..\" Rocket Fuel Tanks\", rx*0.59,ry*0.1+120)\nend\n\n\n--X = rx*0.5\n  --  Y = ry*0.26\n  --  Width = 400\n  --  Height = 50\n    \n  --  if #data.TankList < 5 then\n    --    X = rx*0.5\n    --    Width = 400\n     --   Height = 50\n     --   Y = ry*0.46-(ry*0.05*#data.TankList)\n     --   O = 80\n--for i = 1, #data.TankList do    \n    --    Y = Y+O\n\n     --   DrawProgressBar(X,Y,Width,Height,data.TankList[i].m,data.TankList[i].v,Labels[data.TankList[i].l],math.floor(data.TankList[i].v*100/data.TankList[i].m)..\"%    (\"..data.TankList[i].w..\" tons)\",font3)\n  --  end\n   -- elseif #data.TankList > 8 then\nif #data.TankList > 8 then -- two rows\n        X = rx*0.35\n        Width = 120\n        Height = 25\n        Y = ry*0.46-(ry*0.05*3)\n        O = 50-#data.TankList\n\n\nfor i = 1, math.floor(#data.TankList/2) do    \n\n        Y = Y+O\n\n        DrawProgressBar(X*0.95,Y,Width,Height,data.TankList[i].m,data.TankList[i].v,Labels[data.TankList[i].l],math.floor(data.TankList[i].v*100/data.TankList[i].m)..\"%    (\"..data.TankList[i].w..\" tons)\",textfont)\n    end\nY = ry*0.46-(ry*0.05*3)\nfor i = math.floor(#data.TankList-#data.TankList/2)+1, #data.TankList do    \n\n        Y = Y+O\n\n        DrawProgressBar(X*2.3,Y,Width,Height,data.TankList[i].m,data.TankList[i].v,Labels[data.TankList[i].l],math.floor(data.TankList[i].v*100/data.TankList[i].m)..\"%    (\"..data.TankList[i].w..\" tons)\",textfont)\n    end\n\n\n\n\nelse\nX = rx*0.5\n        Width = 400\n        Height = 50-#data.TankList*3\n        Y = ry*0.46-(ry*0.05*3)\n        O = 80-#data.TankList*5\nfor i = 1, #data.TankList do    \n        Y = Y+O\n\n        DrawProgressBar(X,Y,Width,Height,data.TankList[i].m,data.TankList[i].v,Labels[data.TankList[i].l],math.floor(data.TankList[i].v*100/data.TankList[i].m)..\"%    (\"..data.TankList[i].w..\" tons)\",font3)\n    end\n    end\n\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 5 --\n\nelseif ScreenIndex == 5 then\n   -- addText(layer, titlefont, ScreenIndex, rx/2,ry/2)\n   \n\n\n\n    -------------------------------------------------------------\n    -- INDEX 6 --\n\nelseif ScreenIndex == 6 then\n    \n--addText(layer, titlefont, ScreenIndex, rx/2,ry/2)\n   \n\n\n\nend\n\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle) \n\naddText(layer, textfont, \"SHIP INFO v\" .. version, rx/2, ry*0.984)\n\n\naddText(layer, textfont, ScreenIndex, rx/2+225,ry*0.993)\nsetNextFillColor(layer, 1, 0.1, 0.1, 1) \nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle) \n--addText(layer, textfont, \"render cost: \"..reformatInt(getRenderCost())..\"/\"..reformatInt(getRenderCostMax()), rx/2, ry*0.98)\naddText(layer, textfont, \"render cost: \"..math.floor((getRenderCost()*100)/getRenderCostMax())..\"%\", rx/2.6, ry*0.984)\nsetNextFillColor(layer, 1, 0.1, 0.1, 1) \n\nsetNextTextAlign(layer, AlignH_Center, AlignV_Middle) \n\n\naddText(layer, textfont, \"input: \"..#getInput()..\"/1024\", rx/1.6, ry*0.984)\n\n\nrequestAnimationFrame(1) \n\n        ]]\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"2"}],"methods":[],"events":[]}
